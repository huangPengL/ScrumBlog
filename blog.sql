/*
MySQL Data Transfer
Source Host: localhost
Source Database: blog
Target Host: localhost
Target Database: blog
Date: 2022/3/4 21:42:12
*/

SET FOREIGN_KEY_CHECKS=0;
-- ----------------------------
-- Table structure for hibernate_sequence
-- ----------------------------
DROP TABLE IF EXISTS `hibernate_sequence`;
CREATE TABLE `hibernate_sequence` (
  `next_val` bigint(20) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for t_blog
-- ----------------------------
DROP TABLE IF EXISTS `t_blog`;
CREATE TABLE `t_blog` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `appreciation_state` bit(1) NOT NULL,
  `comment_state` bit(1) NOT NULL,
  `content` longtext,
  `create_time` timestamp NULL DEFAULT NULL,
  `first_picture` varchar(255) DEFAULT NULL,
  `flag` varchar(255) DEFAULT NULL,
  `publish_state` bit(1) NOT NULL,
  `recommend_state` bit(1) NOT NULL,
  `share_state` bit(1) NOT NULL,
  `title` varchar(255) DEFAULT NULL,
  `update_time` timestamp NULL DEFAULT NULL,
  `view_num` int(11) DEFAULT NULL,
  `type_id` bigint(20) DEFAULT NULL,
  `user_id` bigint(20) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK292449gwg5yf7ocdlmswv9w4j` (`type_id`),
  KEY `FK8ky5rrsxh01nkhctmo7d48p82` (`user_id`),
  CONSTRAINT `FK292449gwg5yf7ocdlmswv9w4j` FOREIGN KEY (`type_id`) REFERENCES `t_type` (`id`),
  CONSTRAINT `FK8ky5rrsxh01nkhctmo7d48p82` FOREIGN KEY (`user_id`) REFERENCES `t_user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=36 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for t_blog_tags
-- ----------------------------
DROP TABLE IF EXISTS `t_blog_tags`;
CREATE TABLE `t_blog_tags` (
  `blogs_id` bigint(20) NOT NULL,
  `tags_id` bigint(20) NOT NULL,
  KEY `FK5feau0gb4lq47fdb03uboswm8` (`tags_id`),
  KEY `FKh4pacwjwofrugxa9hpwaxg6mr` (`blogs_id`),
  CONSTRAINT `FK5feau0gb4lq47fdb03uboswm8` FOREIGN KEY (`tags_id`) REFERENCES `t_tag` (`id`),
  CONSTRAINT `FKh4pacwjwofrugxa9hpwaxg6mr` FOREIGN KEY (`blogs_id`) REFERENCES `t_blog` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for t_comment
-- ----------------------------
DROP TABLE IF EXISTS `t_comment`;
CREATE TABLE `t_comment` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `avatar` varchar(255) DEFAULT NULL,
  `content` varchar(255) DEFAULT NULL,
  `create_time` datetime(6) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `nickname` varchar(255) DEFAULT NULL,
  `blog_id` bigint(20) DEFAULT NULL,
  `parent_comment_id` bigint(20) DEFAULT NULL,
  `usertype` bit(1) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FKke3uogd04j4jx316m1p51e05u` (`blog_id`),
  KEY `FK4jj284r3pb7japogvo6h72q95` (`parent_comment_id`),
  CONSTRAINT `FK4jj284r3pb7japogvo6h72q95` FOREIGN KEY (`parent_comment_id`) REFERENCES `t_comment` (`id`),
  CONSTRAINT `FKke3uogd04j4jx316m1p51e05u` FOREIGN KEY (`blog_id`) REFERENCES `t_blog` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=80 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for t_tag
-- ----------------------------
DROP TABLE IF EXISTS `t_tag`;
CREATE TABLE `t_tag` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for t_type
-- ----------------------------
DROP TABLE IF EXISTS `t_type`;
CREATE TABLE `t_type` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=42 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for t_user
-- ----------------------------
DROP TABLE IF EXISTS `t_user`;
CREATE TABLE `t_user` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `avatar` varchar(255) DEFAULT NULL,
  `create_time` datetime(6) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `nickname` varchar(255) DEFAULT NULL,
  `username` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `update_time` datetime(6) DEFAULT NULL,
  `usertype` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records 
-- ----------------------------
INSERT INTO `hibernate_sequence` VALUES ('3');
INSERT INTO `t_blog` VALUES ('1', '', '', '## 1.什么是SpringBoot\r\nSpringBoot是Spring项目中的一个子工程，与我们所熟知的Spring-framework 同属于spring的产品:\r\n\r\n\r\n\r\n我们可以看到下面的一段介绍：\r\n\r\n*Takes an opinionated view of building production-ready Spring applications. Spring Boot favors convention over configuration and is designed to get you up and running as quickly as possible.*\r\n\r\n翻译一下：\r\n\r\n*用一些固定的方式来构建生产级别的spring应用。Spring Boot 推崇约定大于配置的方式以便于你能够尽可能快速的启动并运行程序。*\r\n\r\n其实人们把Spring Boot 称为搭建程序的脚手架。其最主要作用就是帮我们快速的构建庞大的spring项目，并且尽可能的减少一切xml配置，做到开箱即用，迅速上手，让我们关注与业务而非配置。\r\n\r\n## 2.为什么要学习SpringBoot\r\njava一直被人诟病的一点就是臃肿、麻烦。当我们还在辛苦的搭建项目时，可能Python程序员已经把功能写好了，究其原因注意是两点：\r\n\r\n复杂的配置，\r\n\r\n项目各种配置其实是开发时的损耗， 因为在思考 Spring 特性配置和解决业务问题之间需要进行思维切换，所以写配置挤占了写应用程序逻辑的时间。\r\n\r\n一个是混乱的依赖管理。\r\n\r\n项目的依赖管理也是件吃力不讨好的事情。决定项目里要用哪些库就已经够让人头痛的了，你还要知道这些库的哪个版本和其他库不会有冲突，这难题实在太棘手。并且，依赖管理也是一种损耗，添加依赖不是写应用程序代码。一旦选错了依赖的版本，随之而来的不兼容问题毫无疑问会是生产力杀手。\r\n\r\n而SpringBoot让这一切成为过去！\r\n\r\nSpring Boot 简化了基于Spring的应用开发，只需要“run”就能创建一个独立的、生产级别的Spring应用。Spring Boot为Spring平台及第三方库提供开箱即用的设置（提供默认设置，存放默认配置的包就是启动器），这样我们就可以简单的开始。多数Spring Boot应用只需要很少的Spring配置。\r\n\r\n我们可以使用SpringBoot创建java应用，并使用java –jar 启动它，就能得到一个生产级别的web工程。\r\n\r\n## 3.SpringBoot的特点\r\nSpring Boot 主要目标是：\r\n\r\n为所有 Spring 的开发者提供一个非常快速的、广泛接受的入门体验\r\n开箱即用（启动器starter-其实就是SpringBoot提供的一个jar包），但通过自己设置参数（.properties），即可快速摆脱这种方式。\r\n提供了一些大型项目中常见的非功能性特性，如内嵌服务器、安全、指标，健康检测、外部化配置等\r\n绝对没有代码生成，也无需 XML 配置。\r\n更多细节，大家可以到官网查看。\r\n\r\n', '2020-02-05 21:09:19', 'https://z3.ax1x.com/2021/01/21/s4vNGt.jpg', '转载', '', '', '', 'SpringBoot介绍', '2020-02-05 21:09:19', '331', '3', '1', '在服务器上配置jdk，安装Tomcat和mysql。没有jdk什么Java程序也运行不了，所以首先安装jdk并配置系统变量。 Tomcat可装可不装，SpringBoot项目有内置的Tomcat。mysql是必须要的，不然程序写来干嘛呢......');
INSERT INTO `t_blog` VALUES ('7', '', '', '# 如何看待 Typo.css\r\n## fdfsdf\r\n#### dfgdf\r\n- gd\r\n- fg\r\n- dfg\r\n- df\r\n- g\r\n\r\n## dfg\r\n#### dfg\r\n- df\r\n- gd\r\n- fg\r\n', '2020-01-31 16:52:55', 'https://z3.ax1x.com/2021/02/16/ycJqVf.jpg', '转载', '', '', '', '测试凑数3', '2020-01-31 16:52:55', '124', '3', '1', '在服务器上配置jdk，安装Tomcat和mysql。没有jdk什么Java程序也运行不了，所以首先安装jdk并配置系统变量。 Tomcat可装可不装，SpringBoot项目有内置的Tomcat。mysql是必须要的，不然程序写来干嘛呢......');
INSERT INTO `t_blog` VALUES ('8', '', '', '# Spring Boot开发小而美的个人博客\r\n\r\n>  作者：李仁密\r\n\r\n\r\n\r\n**个人博客功能：**\r\n\r\n![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)\r\n\r\n**技术组合：**\r\n\r\n*  后端：Spring Boot + JPA + thymeleaf模板\r\n*  数据库：MySQL\r\n*  前端UI：Semantic UI框架\r\n\r\n**工具与环境：**\r\n\r\n*  IDEA\r\n*  Maven 3\r\n*  JDK 8\r\n*  Axure RP 8\r\n\r\n**课程内容模块：**\r\n\r\n*  需求分析与功能规划\r\n*  页面设计与开发\r\n*  技术框架搭建\r\n*  后端管理功能实现\r\n*  前端管理功能实现\r\n\r\n**你能学得什么？**\r\n\r\n*  基于Spring Boot的完整全栈式的开发套路\r\n*  Semantic UI框架的使用\r\n*  一套博客系统的源代码与设计\r\n\r\n## 1、需求与功能\r\n\r\n### 1.1 用户故事\r\n\r\n用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。\r\n\r\n>  用户故事最好是用户团队编写\r\n\r\n**用户故事模板**：\r\n\r\n-  As a (role of user), I want (some feature) so that (some business value).\r\n-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处\r\n\r\n**关键点**：角色、功能、商业价值\r\n\r\n**举例**：\r\n\r\n-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。\r\n-  作为公司，可以张贴新工作。\r\n\r\n\r\n\r\n个人博客系统的用户故事：\r\n\r\n角色：**普通访客**，**管理员（我）**\r\n\r\n*  访客，可以分页查看所有的博客\r\n*  访客，可以快速查看博客数最多的6个分类\r\n*  访客，可以查看所有的分类\r\n*  访客，可以查看某个分类下的博客列表\r\n*  访客，可以快速查看标记博客最多的10个标签\r\n*  访客，可以查看所有的标签\r\n*  访客，可以查看某个标签下的博客列表\r\n*  访客，可以根据年度时间线查看博客列表\r\n*  访客，可以快速查看最新的推荐博客\r\n*  访客，可以用关键字全局搜索博客\r\n*  访客，可以查看单个博客内容\r\n*  访客，可以对博客内容进行评论\r\n*  访客，可以赞赏博客内容\r\n*  访客，可以微信扫码阅读博客内容\r\n*  访客，可以在首页扫描公众号二维码关注我\r\n*  我，可以用户名和密码登录后台管理\r\n*  我，可以管理博客\r\n   *  我，可以发布新博客\r\n   *  我，可以对博客进行分类\r\n   *  我，可以对博客打标签\r\n   *  我，可以修改博客\r\n   *  我，可以删除博客\r\n   *  我，可以根据标题，分类，标签查询博客\r\n*  我，可以管理博客分类\r\n   *  我，可以新增一个分类\r\n   *  我，可以修改一个分类\r\n   *  我，可以删除一个分类\r\n   *  我，可以根据分类名称查询分类\r\n*  我，可以管理标签\r\n   *  我，可以新增一个标签\r\n   *  我，可以修改一个标签\r\n   *  我，可以删除一个标签\r\n   *  我，可以根据名称查询标签\r\n\r\n### 1.2 功能规划\r\n\r\n![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)\r\n\r\n## 2、页面设计与开发\r\n\r\n### 2.1 设计\r\n\r\n**页面规划：**\r\n\r\n前端展示：首页、详情页、分类、标签、归档、关于我\r\n\r\n后台管理：模板页\r\n\r\n### 2.2 页面开发\r\n\r\n\r\n\r\n[Semantic UI官网](https://semantic-ui.com/)\r\n\r\n[Semantic UI中文官网](http://www.semantic-ui.cn/)\r\n\r\n[WebStorm下载与破解](https://imcoding.me/blogs/5)\r\n\r\n[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)\r\n\r\n### 2.3 插件集成\r\n\r\n\r\n\r\n[编辑器 Markdown](https://pandao.github.io/editor.md/)\r\n\r\n[内容排版 typo.css](https://github.com/sofish/typo.css)\r\n\r\n[动画 animate.css](https://daneden.github.io/animate.css/)\r\n\r\n[代码高亮 prism](https://github.com/PrismJS/prism)\r\n\r\n[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)\r\n\r\n[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)\r\n\r\n[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)\r\n\r\n[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)\r\n\r\n## 3、框架搭建\r\n\r\n>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)\r\n\r\n### 3.1 构建与配置\r\n\r\n**1、引入Spring Boot模块：**\r\n\r\n*  web\r\n*  Thymeleaf\r\n*  JPA\r\n*  MySQL\r\n*  Aspects\r\n*  DevTools\r\n\r\n**2、application.yml配置**\r\n\r\n*  使用 thymeleaf 3\r\n\r\n   pom.xml:\r\n\r\n```xml\r\n<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>\r\n<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>\r\n```\r\n\r\n\r\n  	application.yml:\r\n\r\n```yaml\r\nspring:\r\n  thymeleaf:\r\n    mode: HTML\r\n```\r\n\r\n*  数据库连接配置\r\n\r\n```yaml\r\nspring:\r\n  datasource:\r\n    driver-class-name: com.mysql.jdbc.Driver\r\n    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8\r\n    username: root\r\n    password: root\r\n  jpa:\r\n    hibernate:\r\n      ddl-auto: update\r\n    show-sql: true\r\n```\r\n\r\n*  日志配置\r\n\r\n   application.yml:\r\n\r\n```yaml\r\nlogging:\r\n  level:\r\n    root: info\r\n    com.imcoding: debug\r\n  file: log/imcoding.log\r\n```\r\n\r\n​	logback-spring.xml：\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<configuration>\r\n    <!--包含Spring boot对logback日志的默认配置-->\r\n    <include resource=\"org/springframework/boot/logging/logback/defaults.xml\" />\r\n    <property name=\"LOG_FILE\" value=\"${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}\"/>\r\n    <include resource=\"org/springframework/boot/logging/logback/console-appender.xml\" />\r\n\r\n    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->\r\n    <appender name=\"TIME_FILE\"\r\n              class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\r\n        <encoder>\r\n            <pattern>${FILE_LOG_PATTERN}</pattern>\r\n        </encoder>\r\n        <file>${LOG_FILE}</file>\r\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\r\n            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>\r\n            <!--保留历史日志一个月的时间-->\r\n            <maxHistory>30</maxHistory>\r\n            <!--\r\n            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志\r\n            -->\r\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\r\n                <maxFileSize>10MB</maxFileSize>\r\n            </timeBasedFileNamingAndTriggeringPolicy>\r\n\r\n        </rollingPolicy>\r\n    </appender>\r\n\r\n    <root level=\"INFO\">\r\n        <appender-ref ref=\"CONSOLE\" />\r\n        <appender-ref ref=\"TIME_FILE\" />\r\n    </root>\r\n\r\n</configuration>\r\n<!--\r\n    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）\r\n    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：\r\n\r\n        my.2017-08-01.0   80MB\r\n        my.2017-08-01.1   10MB\r\n        my.2017-08-02.0   56MB\r\n        my.2017-08-03.0   53MB\r\n        ......\r\n-->\r\n```\r\n\r\n*  生产环境与开发环境配置\r\n   *  application-dev.yml\r\n   *  application-pro.yml\r\n\r\n### 3.2 异常处理\r\n\r\n**1、定义错误页面**\r\n\r\n*  404\r\n*  500\r\n*  error\r\n\r\n**2、全局处理异常**\r\n\r\n统一处理异常：\r\n\r\n```java\r\n@ControllerAdvice\r\npublic class ControllerExceptionHandler {\r\n\r\n    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);\r\n    /**\r\n     * 异常处理\r\n     * @param request\r\n     * @param e\r\n     * @return\r\n     */\r\n    @ExceptionHandler({Exception.class})\r\n    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {\r\n\r\n        logger.error(\"Request URL : {} , Exception : {}\", request.getRequestURL(), e);\r\n\r\n        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {\r\n            throw e;\r\n        }\r\n        ModelAndView mav = new ModelAndView();\r\n        mav.addObject(\"url\", request.getRequestURL());\r\n        mav.addObject(\"exception\", e);\r\n        mav.setViewName(\"error/error\");\r\n\r\n        return mav;\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n错误页面异常信息显示处理：\r\n\r\n```html\r\n<div>\r\n    <div th:utext=\"\'&lt;!--\'\" th:remove=\"tag\"></div>\r\n    <div th:utext=\"\'Failed Request URL : \' + ${url}\" th:remove=\"tag\"></div>\r\n    <div th:utext=\"\'Exception message : \' + ${exception.message}\" th:remove=\"tag\"></div>\r\n    <ul th:remove=\"tag\">\r\n        <li th:each=\"st : ${exception.stackTrace}\" th:remove=\"tag\"><span th:utext=\"${st}\" th:remove=\"tag\"></span></li>\r\n    </ul>\r\n    <div th:utext=\"\'--&gt;\'\" th:remove=\"tag\"></div>\r\n</div>\r\n```\r\n\r\n\r\n\r\n**3、资源找不到异常**\r\n\r\n```java\r\n@ResponseStatus(HttpStatus.NOT_FOUND)\r\npublic class NotFoundExcepiton extends RuntimeException {\r\n\r\n    public NotFoundExcepiton() {\r\n    }\r\n\r\n    public NotFoundExcepiton(String message) {\r\n        super(message);\r\n    }\r\n\r\n    public NotFoundExcepiton(String message, Throwable cause) {\r\n        super(message, cause);\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### 3.3 日志处理\r\n\r\n**1、记录日志内容**\r\n\r\n*  请求 url\r\n*  访问者 ip\r\n*  调用方法 classMethod\r\n*  参数 args\r\n*  返回内容\r\n\r\n**2、记录日志类：**\r\n\r\n```java\r\n@Aspect\r\n@Component\r\npublic class LogAspect {\r\n\r\n    private final Logger logger = LoggerFactory.getLogger(this.getClass());\r\n\r\n    /**\r\n     * 定义切面\r\n     */\r\n    @Pointcut(\"execution(* com.imcoding.web.*.*(..))\")\r\n    public void log() {\r\n    }\r\n\r\n    @Before(\"log()\")\r\n    public void doBefore(JoinPoint joinPoint) {\r\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\r\n        HttpServletRequest request = attributes.getRequest();\r\n        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + \".\" + joinPoint.getSignature().getName();\r\n        ReqeustLog reqeustLog = new ReqeustLog(\r\n                request.getRequestURL().toString(),\r\n                request.getRemoteAddr(),\r\n                classMethod,\r\n                joinPoint.getArgs()\r\n        );\r\n        logger.info(\"Rquest  ----- {}\",reqeustLog);\r\n    }\r\n\r\n    @After(\"log()\")\r\n    public void doAfter() {\r\n        //logger.info(\"---------- doAfter 2 ----------\");\r\n    }\r\n\r\n    @AfterReturning(returning = \"result\",pointcut = \"log()\")\r\n    public void doAtfertRturning(Object result) {\r\n        logger.info(\"Return ------ {}\",result );\r\n    }\r\n\r\n\r\n    private class ReqeustLog {\r\n        private String url;\r\n        private String ip;\r\n        private String classMethod;\r\n        private Object[] args;\r\n\r\n        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {\r\n            this.url = url;\r\n            this.ip = ip;\r\n            this.classMethod = classMethod;\r\n            this.args = args;\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"ReqeustLog{\" +\r\n                    \"url=\'\" + url + \'\\\'\' +\r\n                    \", ip=\'\" + ip + \'\\\'\' +\r\n                    \", classMethod=\'\" + classMethod + \'\\\'\' +\r\n                    \", args=\" + Arrays.toString(args) +\r\n                    \'}\';\r\n        }\r\n    }\r\n\r\n}\r\n```\r\n\r\n\r\n\r\n### 3.4 页面处理\r\n\r\n\r\n\r\n**1、静态页面导入project**\r\n\r\n**2、thymeleaf布局**\r\n\r\n*  定义fragment\r\n*  使用fragment布局\r\n\r\n**3、错误页面美化**\r\n\r\n4、设计与规范\r\n\r\n### 4.1 实体设计\r\n\r\n**实体类：**\r\n\r\n*  博客 Blog\r\n*  博客分类 Type\r\n*  博客标签 Tag\r\n*  博客评论 Comment\r\n*  用户 User\r\n\r\n\r\n\r\n**实体关系：**\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)\r\n\r\n**评论类自关联关系：**\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)\r\n\r\n**Blog类：**\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)\r\n\r\n**Type类：**\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)\r\n\r\n**Tag类：**\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)\r\n\r\n**Comment类：**\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)\r\n\r\n\r\n\r\n**User类：**\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)\r\n\r\n\r\n\r\n### 4.2 应用分层\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)\r\n\r\n### 4.3 命名约定\r\n\r\n**Service/DAO层命名约定：**\r\n\r\n*  获取单个对象的方法用get做前缀。\r\n*  获取多个对象的方法用list做前缀。\r\n*  获取统计值的方法用count做前缀。\r\n*  插入的方法用save(推荐)或insert做前缀。\r\n*  删除的方法用remove(推荐)或delete做前缀。\r\n*  修改的方法用update做前缀。\r\n\r\n\r\n\r\n\r\n![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)\r\n\r\n## 5、后台管理功能实现\r\n\r\n### 5.1 登录\r\n\r\n\r\n\r\n**1、构建登录页面和后台管理首页**\r\n\r\n**2、UserService和UserRepository**\r\n\r\n**3、LoginController实现登录**\r\n\r\n**4、MD5加密**\r\n\r\n**5、登录拦截器**\r\n\r\n### 5.2 分类管理\r\n\r\n\r\n\r\n**1、分类管理页面**\r\n\r\n**2、分类列表分页**\r\n\r\n````javascript\r\n{\r\n  \"content\":[\r\n    {\"id\":123,\"title\":\"blog122\",\"content\":\"this is blog content\"},\r\n    {\"id\":122,\"title\":\"blog121\",\"content\":\"this is blog content\"},\r\n    {\"id\":121,\"title\":\"blog120\",\"content\":\"this is blog content\"},\r\n    {\"id\":120,\"title\":\"blog119\",\"content\":\"this is blog content\"},\r\n    {\"id\":119,\"title\":\"blog118\",\"content\":\"this is blog content\"},\r\n    {\"id\":118,\"title\":\"blog117\",\"content\":\"this is blog content\"},\r\n    {\"id\":117,\"title\":\"blog116\",\"content\":\"this is blog content\"},\r\n    {\"id\":116,\"title\":\"blog115\",\"content\":\"this is blog content\"},\r\n    {\"id\":115,\"title\":\"blog114\",\"content\":\"this is blog content\"},\r\n    {\"id\":114,\"title\":\"blog113\",\"content\":\"this is blog content\"},\r\n    {\"id\":113,\"title\":\"blog112\",\"content\":\"this is blog content\"},\r\n    {\"id\":112,\"title\":\"blog111\",\"content\":\"this is blog content\"},\r\n    {\"id\":111,\"title\":\"blog110\",\"content\":\"this is blog content\"},\r\n    {\"id\":110,\"title\":\"blog109\",\"content\":\"this is blog content\"},\r\n    {\"id\":109,\"title\":\"blog108\",\"content\":\"this is blog content\"}],\r\n  \"last\":false,\r\n  \"totalPages\":9,\r\n  \"totalElements\":123,\r\n  \"size\":15,\r\n  \"number\":0,\r\n  \"first\":true,\r\n  \"sort\":[{\r\n    \"direction\":\"DESC\",\r\n    \"property\":\"id\",\r\n    \"ignoreCase\":false,\r\n    \"nullHandling\":\"NATIVE\",\r\n    \"ascending\":false\r\n  }],\r\n  \"numberOfElements\":15\r\n}\r\n````\r\n\r\n\r\n\r\n**3、分类新增、修改、删除**\r\n\r\n### 5.3 标签管理\r\n\r\n### 5.4 博客管理\r\n\r\n\r\n\r\n**1、博客分页查询**\r\n\r\n**2、博客新增**\r\n\r\n**3、博客修改**\r\n\r\n**4、博客删除**\r\n\r\n## 6、前端展示功能实现\r\n\r\n### 6.1 首页展示\r\n\r\n\r\n\r\n**1、博客列表**\r\n\r\n**2、top分类**\r\n\r\n**3、top标签**\r\n\r\n**4、最新博客推荐**\r\n\r\n**5、博客详情**\r\n\r\n**1、Markdown 转换 HTML**\r\n\r\n*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)\r\n*  pom.xml引用commonmark和扩展插件\r\n\r\n```xml\r\n<dependency>\r\n   <groupId>com.atlassian.commonmark</groupId>\r\n   <artifactId>commonmark</artifactId>\r\n   <version>0.10.0</version>\r\n</dependency>\r\n<dependency>\r\n   <groupId>com.atlassian.commonmark</groupId>\r\n   <artifactId>commonmark-ext-heading-anchor</artifactId>\r\n   <version>0.10.0</version>\r\n</dependency>\r\n<dependency>\r\n   <groupId>com.atlassian.commonmark</groupId>\r\n   <artifactId>commonmark-ext-gfm-tables</artifactId>\r\n   <version>0.10.0</version>\r\n</dependency>\r\n```\r\n\r\n\r\n\r\n**2、评论功能**\r\n\r\n\r\n\r\n*  评论信息提交与回复功能\r\n*  评论信息列表展示功能\r\n*  管理员回复评论功能\r\n\r\n\r\n### 6.2 分类页\r\n\r\n### 6.3 标签页\r\n\r\n### 6.4 归档页\r\n\r\n### 6.5 关于我\r\n\r\n\r\n\r\n\r\n\r\n', '2019-03-01 17:02:03', 'https://z3.ax1x.com/2021/02/16/ycJLa8.jpg', '原创', '', '', '', '测试草稿', '2020-01-01 17:02:03', '45', '3', '1', '在服务器上配置jdk，安装Tomcat和mysql。没有jdk什么Java程序也运行不了，所以首先安装jdk并配置系统变量。 Tomcat可装可不装，SpringBoot项目有内置的Tomcat。mysql是必须要的，不然程序写来干嘛呢......');
INSERT INTO `t_blog` VALUES ('9', '', '', '# Spring Boot开发小而美的个人博客\r\n\r\n>  作者：李仁密\r\n\r\n\r\n\r\n**个人博客功能：**\r\n\r\n![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)\r\n\r\n**技术组合：**\r\n\r\n*  后端：Spring Boot + JPA + thymeleaf模板\r\n*  数据库：MySQL\r\n*  前端UI：Semantic UI框架\r\n\r\n**工具与环境：**\r\n\r\n*  IDEA\r\n*  Maven 3\r\n*  JDK 8\r\n*  Axure RP 8\r\n\r\n**课程内容模块：**\r\n\r\n*  需求分析与功能规划\r\n*  页面设计与开发\r\n*  技术框架搭建\r\n*  后端管理功能实现\r\n*  前端管理功能实现\r\n\r\n**你能学得什么？**\r\n\r\n*  基于Spring Boot的完整全栈式的开发套路\r\n*  Semantic UI框架的使用\r\n*  一套博客系统的源代码与设计\r\n\r\n## 1、需求与功能\r\n\r\n### 1.1 用户故事\r\n\r\n用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。\r\n\r\n>  用户故事最好是用户团队编写\r\n\r\n**用户故事模板**：\r\n\r\n-  As a (role of user), I want (some feature) so that (some business value).\r\n-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处\r\n\r\n**关键点**：角色、功能、商业价值\r\n\r\n**举例**：\r\n\r\n-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。\r\n-  作为公司，可以张贴新工作。\r\n\r\n\r\n\r\n个人博客系统的用户故事：\r\n\r\n角色：**普通访客**，**管理员（我）**\r\n\r\n*  访客，可以分页查看所有的博客\r\n*  访客，可以快速查看博客数最多的6个分类\r\n*  访客，可以查看所有的分类\r\n*  访客，可以查看某个分类下的博客列表\r\n*  访客，可以快速查看标记博客最多的10个标签\r\n*  访客，可以查看所有的标签\r\n*  访客，可以查看某个标签下的博客列表\r\n*  访客，可以根据年度时间线查看博客列表\r\n*  访客，可以快速查看最新的推荐博客\r\n*  访客，可以用关键字全局搜索博客\r\n*  访客，可以查看单个博客内容\r\n*  访客，可以对博客内容进行评论\r\n*  访客，可以赞赏博客内容\r\n*  访客，可以微信扫码阅读博客内容\r\n*  访客，可以在首页扫描公众号二维码关注我\r\n*  我，可以用户名和密码登录后台管理\r\n*  我，可以管理博客\r\n   *  我，可以发布新博客\r\n   *  我，可以对博客进行分类\r\n   *  我，可以对博客打标签\r\n   *  我，可以修改博客\r\n   *  我，可以删除博客\r\n   *  我，可以根据标题，分类，标签查询博客\r\n*  我，可以管理博客分类\r\n   *  我，可以新增一个分类\r\n   *  我，可以修改一个分类\r\n   *  我，可以删除一个分类\r\n   *  我，可以根据分类名称查询分类\r\n*  我，可以管理标签\r\n   *  我，可以新增一个标签\r\n   *  我，可以修改一个标签\r\n   *  我，可以删除一个标签\r\n   *  我，可以根据名称查询标签\r\n\r\n### 1.2 功能规划\r\n\r\n![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)\r\n\r\n## 2、页面设计与开发\r\n\r\n### 2.1 设计\r\n\r\n**页面规划：**\r\n\r\n前端展示：首页、详情页、分类、标签、归档、关于我\r\n\r\n后台管理：模板页\r\n\r\n### 2.2 页面开发\r\n\r\n\r\n\r\n[Semantic UI官网](https://semantic-ui.com/)\r\n\r\n[Semantic UI中文官网](http://www.semantic-ui.cn/)\r\n\r\n[WebStorm下载与破解](https://imcoding.me/blogs/5)\r\n\r\n[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)\r\n\r\n### 2.3 插件集成\r\n\r\n\r\n\r\n[编辑器 Markdown](https://pandao.github.io/editor.md/)\r\n\r\n[内容排版 typo.css](https://github.com/sofish/typo.css)\r\n\r\n[动画 animate.css](https://daneden.github.io/animate.css/)\r\n\r\n[代码高亮 prism](https://github.com/PrismJS/prism)\r\n\r\n[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)\r\n\r\n[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)\r\n\r\n[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)\r\n\r\n[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)\r\n\r\n## 3、框架搭建\r\n\r\n>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)\r\n\r\n### 3.1 构建与配置\r\n\r\n**1、引入Spring Boot模块：**\r\n\r\n*  web\r\n*  Thymeleaf\r\n*  JPA\r\n*  MySQL\r\n*  Aspects\r\n*  DevTools\r\n\r\n**2、application.yml配置**\r\n\r\n*  使用 thymeleaf 3\r\n\r\n   pom.xml:\r\n\r\n```xml\r\n<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>\r\n<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>\r\n```\r\n\r\n\r\n  	application.yml:\r\n\r\n```yaml\r\nspring:\r\n  thymeleaf:\r\n    mode: HTML\r\n```\r\n\r\n*  数据库连接配置\r\n\r\n```yaml\r\nspring:\r\n  datasource:\r\n    driver-class-name: com.mysql.jdbc.Driver\r\n    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8\r\n    username: root\r\n    password: root\r\n  jpa:\r\n    hibernate:\r\n      ddl-auto: update\r\n    show-sql: true\r\n```\r\n\r\n*  日志配置\r\n\r\n   application.yml:\r\n\r\n```yaml\r\nlogging:\r\n  level:\r\n    root: info\r\n    com.imcoding: debug\r\n  file: log/imcoding.log\r\n```\r\n\r\n​	logback-spring.xml：\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<configuration>\r\n    <!--包含Spring boot对logback日志的默认配置-->\r\n    <include resource=\"org/springframework/boot/logging/logback/defaults.xml\" />\r\n    <property name=\"LOG_FILE\" value=\"${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}\"/>\r\n    <include resource=\"org/springframework/boot/logging/logback/console-appender.xml\" />\r\n\r\n    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->\r\n    <appender name=\"TIME_FILE\"\r\n              class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\r\n        <encoder>\r\n            <pattern>${FILE_LOG_PATTERN}</pattern>\r\n        </encoder>\r\n        <file>${LOG_FILE}</file>\r\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\r\n            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>\r\n            <!--保留历史日志一个月的时间-->\r\n            <maxHistory>30</maxHistory>\r\n            <!--\r\n            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志\r\n            -->\r\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\r\n                <maxFileSize>10MB</maxFileSize>\r\n            </timeBasedFileNamingAndTriggeringPolicy>\r\n\r\n        </rollingPolicy>\r\n    </appender>\r\n\r\n    <root level=\"INFO\">\r\n        <appender-ref ref=\"CONSOLE\" />\r\n        <appender-ref ref=\"TIME_FILE\" />\r\n    </root>\r\n\r\n</configuration>\r\n<!--\r\n    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）\r\n    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：\r\n\r\n        my.2017-08-01.0   80MB\r\n        my.2017-08-01.1   10MB\r\n        my.2017-08-02.0   56MB\r\n        my.2017-08-03.0   53MB\r\n        ......\r\n-->\r\n```\r\n\r\n*  生产环境与开发环境配置\r\n   *  application-dev.yml\r\n   *  application-pro.yml\r\n\r\n### 3.2 异常处理\r\n\r\n**1、定义错误页面**\r\n\r\n*  404\r\n*  500\r\n*  error\r\n\r\n**2、全局处理异常**\r\n\r\n统一处理异常：\r\n\r\n```java\r\n@ControllerAdvice\r\npublic class ControllerExceptionHandler {\r\n\r\n    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);\r\n    /**\r\n     * 异常处理\r\n     * @param request\r\n     * @param e\r\n     * @return\r\n     */\r\n    @ExceptionHandler({Exception.class})\r\n    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {\r\n\r\n        logger.error(\"Request URL : {} , Exception : {}\", request.getRequestURL(), e);\r\n\r\n        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {\r\n            throw e;\r\n        }\r\n        ModelAndView mav = new ModelAndView();\r\n        mav.addObject(\"url\", request.getRequestURL());\r\n        mav.addObject(\"exception\", e);\r\n        mav.setViewName(\"error/error\");\r\n\r\n        return mav;\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n错误页面异常信息显示处理：\r\n\r\n```html\r\n<div>\r\n    <div th:utext=\"\'&lt;!--\'\" th:remove=\"tag\"></div>\r\n    <div th:utext=\"\'Failed Request URL : \' + ${url}\" th:remove=\"tag\"></div>\r\n    <div th:utext=\"\'Exception message : \' + ${exception.message}\" th:remove=\"tag\"></div>\r\n    <ul th:remove=\"tag\">\r\n        <li th:each=\"st : ${exception.stackTrace}\" th:remove=\"tag\"><span th:utext=\"${st}\" th:remove=\"tag\"></span></li>\r\n    </ul>\r\n    <div th:utext=\"\'--&gt;\'\" th:remove=\"tag\"></div>\r\n</div>\r\n```\r\n\r\n\r\n\r\n**3、资源找不到异常**\r\n\r\n```java\r\n@ResponseStatus(HttpStatus.NOT_FOUND)\r\npublic class NotFoundExcepiton extends RuntimeException {\r\n\r\n    public NotFoundExcepiton() {\r\n    }\r\n\r\n    public NotFoundExcepiton(String message) {\r\n        super(message);\r\n    }\r\n\r\n    public NotFoundExcepiton(String message, Throwable cause) {\r\n        super(message, cause);\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### 3.3 日志处理\r\n\r\n**1、记录日志内容**\r\n\r\n*  请求 url\r\n*  访问者 ip\r\n*  调用方法 classMethod\r\n*  参数 args\r\n*  返回内容\r\n\r\n**2、记录日志类：**\r\n\r\n```java\r\n@Aspect\r\n@Component\r\npublic class LogAspect {\r\n\r\n    private final Logger logger = LoggerFactory.getLogger(this.getClass());\r\n\r\n    /**\r\n     * 定义切面\r\n     */\r\n    @Pointcut(\"execution(* com.imcoding.web.*.*(..))\")\r\n    public void log() {\r\n    }\r\n\r\n    @Before(\"log()\")\r\n    public void doBefore(JoinPoint joinPoint) {\r\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\r\n        HttpServletRequest request = attributes.getRequest();\r\n        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + \".\" + joinPoint.getSignature().getName();\r\n        ReqeustLog reqeustLog = new ReqeustLog(\r\n                request.getRequestURL().toString(),\r\n                request.getRemoteAddr(),\r\n                classMethod,\r\n                joinPoint.getArgs()\r\n        );\r\n        logger.info(\"Rquest  ----- {}\",reqeustLog);\r\n    }\r\n\r\n    @After(\"log()\")\r\n    public void doAfter() {\r\n        //logger.info(\"---------- doAfter 2 ----------\");\r\n    }\r\n\r\n    @AfterReturning(returning = \"result\",pointcut = \"log()\")\r\n    public void doAtfertRturning(Object result) {\r\n        logger.info(\"Return ------ {}\",result );\r\n    }\r\n\r\n\r\n    private class ReqeustLog {\r\n        private String url;\r\n        private String ip;\r\n        private String classMethod;\r\n        private Object[] args;\r\n\r\n        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {\r\n            this.url = url;\r\n            this.ip = ip;\r\n            this.classMethod = classMethod;\r\n            this.args = args;\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"ReqeustLog{\" +\r\n                    \"url=\'\" + url + \'\\\'\' +\r\n                    \", ip=\'\" + ip + \'\\\'\' +\r\n                    \", classMethod=\'\" + classMethod + \'\\\'\' +\r\n                    \", args=\" + Arrays.toString(args) +\r\n                    \'}\';\r\n        }\r\n    }\r\n\r\n}\r\n```\r\n\r\n\r\n\r\n### 3.4 页面处理\r\n\r\n\r\n\r\n**1、静态页面导入project**\r\n\r\n**2、thymeleaf布局**\r\n\r\n*  定义fragment\r\n*  使用fragment布局\r\n\r\n**3、错误页面美化**\r\n\r\n4、设计与规范\r\n\r\n### 4.1 实体设计\r\n\r\n**实体类：**\r\n\r\n*  博客 Blog\r\n*  博客分类 Type\r\n*  博客标签 Tag\r\n*  博客评论 Comment\r\n*  用户 User\r\n\r\n\r\n\r\n**实体关系：**\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)\r\n\r\n**评论类自关联关系：**\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)\r\n\r\n**Blog类：**\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)\r\n\r\n**Type类：**\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)\r\n\r\n**Tag类：**\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)\r\n\r\n**Comment类：**\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)\r\n\r\n\r\n\r\n**User类：**\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)\r\n\r\n\r\n\r\n### 4.2 应用分层\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)\r\n\r\n### 4.3 命名约定\r\n\r\n**Service/DAO层命名约定：**\r\n\r\n*  获取单个对象的方法用get做前缀。\r\n*  获取多个对象的方法用list做前缀。\r\n*  获取统计值的方法用count做前缀。\r\n*  插入的方法用save(推荐)或insert做前缀。\r\n*  删除的方法用remove(推荐)或delete做前缀。\r\n*  修改的方法用update做前缀。\r\n\r\n\r\n\r\n\r\n![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)\r\n\r\n## 5、后台管理功能实现\r\n\r\n### 5.1 登录\r\n\r\n\r\n\r\n**1、构建登录页面和后台管理首页**\r\n\r\n**2、UserService和UserRepository**\r\n\r\n**3、LoginController实现登录**\r\n\r\n**4、MD5加密**\r\n\r\n**5、登录拦截器**\r\n\r\n### 5.2 分类管理\r\n\r\n\r\n\r\n**1、分类管理页面**\r\n\r\n**2、分类列表分页**\r\n\r\n````javascript\r\n{\r\n  \"content\":[\r\n    {\"id\":123,\"title\":\"blog122\",\"content\":\"this is blog content\"},\r\n    {\"id\":122,\"title\":\"blog121\",\"content\":\"this is blog content\"},\r\n    {\"id\":121,\"title\":\"blog120\",\"content\":\"this is blog content\"},\r\n    {\"id\":120,\"title\":\"blog119\",\"content\":\"this is blog content\"},\r\n    {\"id\":119,\"title\":\"blog118\",\"content\":\"this is blog content\"},\r\n    {\"id\":118,\"title\":\"blog117\",\"content\":\"this is blog content\"},\r\n    {\"id\":117,\"title\":\"blog116\",\"content\":\"this is blog content\"},\r\n    {\"id\":116,\"title\":\"blog115\",\"content\":\"this is blog content\"},\r\n    {\"id\":115,\"title\":\"blog114\",\"content\":\"this is blog content\"},\r\n    {\"id\":114,\"title\":\"blog113\",\"content\":\"this is blog content\"},\r\n    {\"id\":113,\"title\":\"blog112\",\"content\":\"this is blog content\"},\r\n    {\"id\":112,\"title\":\"blog111\",\"content\":\"this is blog content\"},\r\n    {\"id\":111,\"title\":\"blog110\",\"content\":\"this is blog content\"},\r\n    {\"id\":110,\"title\":\"blog109\",\"content\":\"this is blog content\"},\r\n    {\"id\":109,\"title\":\"blog108\",\"content\":\"this is blog content\"}],\r\n  \"last\":false,\r\n  \"totalPages\":9,\r\n  \"totalElements\":123,\r\n  \"size\":15,\r\n  \"number\":0,\r\n  \"first\":true,\r\n  \"sort\":[{\r\n    \"direction\":\"DESC\",\r\n    \"property\":\"id\",\r\n    \"ignoreCase\":false,\r\n    \"nullHandling\":\"NATIVE\",\r\n    \"ascending\":false\r\n  }],\r\n  \"numberOfElements\":15\r\n}\r\n````\r\n\r\n\r\n\r\n**3、分类新增、修改、删除**\r\n\r\n### 5.3 标签管理\r\n\r\n### 5.4 博客管理\r\n\r\n\r\n\r\n**1、博客分页查询**\r\n\r\n**2、博客新增**\r\n\r\n**3、博客修改**\r\n\r\n**4、博客删除**\r\n\r\n## 6、前端展示功能实现\r\n\r\n### 6.1 首页展示\r\n\r\n\r\n\r\n**1、博客列表**\r\n\r\n**2、top分类**\r\n\r\n**3、top标签**\r\n\r\n**4、最新博客推荐**\r\n\r\n**5、博客详情**\r\n\r\n**1、Markdown 转换 HTML**\r\n\r\n*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)\r\n*  pom.xml引用commonmark和扩展插件\r\n\r\n```xml\r\n<dependency>\r\n   <groupId>com.atlassian.commonmark</groupId>\r\n   <artifactId>commonmark</artifactId>\r\n   <version>0.10.0</version>\r\n</dependency>\r\n<dependency>\r\n   <groupId>com.atlassian.commonmark</groupId>\r\n   <artifactId>commonmark-ext-heading-anchor</artifactId>\r\n   <version>0.10.0</version>\r\n</dependency>\r\n<dependency>\r\n   <groupId>com.atlassian.commonmark</groupId>\r\n   <artifactId>commonmark-ext-gfm-tables</artifactId>\r\n   <version>0.10.0</version>\r\n</dependency>\r\n```\r\n\r\n\r\n\r\n**2、评论功能**\r\n\r\n\r\n\r\n*  评论信息提交与回复功能\r\n*  评论信息列表展示功能\r\n*  管理员回复评论功能\r\n\r\n\r\n### 6.2 分类页\r\n\r\n### 6.3 标签页\r\n\r\n### 6.4 归档页\r\n\r\n### 6.5 关于我\r\n\r\n\r\n\r\n\r\n\r\n', '2020-01-31 17:05:31', 'https://z3.ax1x.com/2021/02/17/y2SjgA.jpg', '原创', '', '', '', '测试凑数1', '2020-01-31 17:05:31', '102', '1', '1', '在服务器上配置jdk，安装Tomcat和mysql。没有jdk什么Java程序也运行不了，所以首先安装jdk并配置系统变量。 Tomcat可装可不装，SpringBoot项目有内置的Tomcat。mysql是必须要的，不然程序写来干嘛呢......');
INSERT INTO `t_blog` VALUES ('17', '', '', '**123123**', '2020-02-01 20:06:45', 'https://z3.ax1x.com/2021/02/16/ycJHqP.jpg', '转载', '', '', '', '测试凑数4', '2020-02-01 20:06:45', '235', '2', '1', '在服务器上配置jdk，安装Tomcat和mysql。没有jdk什么Java程序也运行不了，所以首先安装jdk并配置系统变量。 Tomcat可装可不装，SpringBoot项目有内置的Tomcat。mysql是必须要的，不然程序写来干嘛呢......');
INSERT INTO `t_blog` VALUES ('18', '', '', '# Spring Boot开发小而美的个人博客\r\n\r\n>  作者：李仁密\r\n\r\n\r\n\r\n**个人博客功能：**\r\n\r\n![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)\r\n\r\n**技术组合：**\r\n\r\n*  后端：Spring Boot + JPA + thymeleaf模板\r\n*  数据库：MySQL\r\n*  前端UI：Semantic UI框架\r\n\r\n**工具与环境：**\r\n\r\n*  IDEA\r\n*  Maven 3\r\n*  JDK 8\r\n*  Axure RP 8\r\n\r\n**课程内容模块：**\r\n\r\n*  需求分析与功能规划\r\n*  页面设计与开发\r\n*  技术框架搭建\r\n*  后端管理功能实现\r\n*  前端管理功能实现\r\n\r\n**你能学得什么？**\r\n\r\n*  基于Spring Boot的完整全栈式的开发套路\r\n*  Semantic UI框架的使用\r\n*  一套博客系统的源代码与设计\r\n\r\n## 1、需求与功能\r\n\r\n### 1.1 用户故事\r\n\r\n用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。\r\n\r\n>  用户故事最好是用户团队编写\r\n\r\n**用户故事模板**：\r\n\r\n-  As a (role of user), I want (some feature) so that (some business value).\r\n-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处\r\n\r\n**关键点**：角色、功能、商业价值\r\n\r\n**举例**：\r\n\r\n-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。\r\n-  作为公司，可以张贴新工作。\r\n\r\n\r\n\r\n个人博客系统的用户故事：\r\n\r\n角色：**普通访客**，**管理员（我）**\r\n\r\n*  访客，可以分页查看所有的博客\r\n*  访客，可以快速查看博客数最多的6个分类\r\n*  访客，可以查看所有的分类\r\n*  访客，可以查看某个分类下的博客列表\r\n*  访客，可以快速查看标记博客最多的10个标签\r\n*  访客，可以查看所有的标签\r\n*  访客，可以查看某个标签下的博客列表\r\n*  访客，可以根据年度时间线查看博客列表\r\n*  访客，可以快速查看最新的推荐博客\r\n*  访客，可以用关键字全局搜索博客\r\n*  访客，可以查看单个博客内容\r\n*  访客，可以对博客内容进行评论\r\n*  访客，可以赞赏博客内容\r\n*  访客，可以微信扫码阅读博客内容\r\n*  访客，可以在首页扫描公众号二维码关注我\r\n*  我，可以用户名和密码登录后台管理\r\n*  我，可以管理博客\r\n   *  我，可以发布新博客\r\n   *  我，可以对博客进行分类\r\n   *  我，可以对博客打标签\r\n   *  我，可以修改博客\r\n   *  我，可以删除博客\r\n   *  我，可以根据标题，分类，标签查询博客\r\n*  我，可以管理博客分类\r\n   *  我，可以新增一个分类\r\n   *  我，可以修改一个分类\r\n   *  我，可以删除一个分类\r\n   *  我，可以根据分类名称查询分类\r\n*  我，可以管理标签\r\n   *  我，可以新增一个标签\r\n   *  我，可以修改一个标签\r\n   *  我，可以删除一个标签\r\n   *  我，可以根据名称查询标签\r\n\r\n### 1.2 功能规划\r\n\r\n![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)\r\n\r\n## 2、页面设计与开发\r\n\r\n### 2.1 设计\r\n\r\n**页面规划：**\r\n\r\n前端展示：首页、详情页、分类、标签、归档、关于我\r\n\r\n后台管理：模板页\r\n\r\n### 2.2 页面开发\r\n\r\n\r\n\r\n[Semantic UI官网](https://semantic-ui.com/)\r\n\r\n[Semantic UI中文官网](http://www.semantic-ui.cn/)\r\n\r\n[WebStorm下载与破解](https://imcoding.me/blogs/5)\r\n\r\n[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)\r\n\r\n### 2.3 插件集成\r\n\r\n\r\n\r\n[编辑器 Markdown](https://pandao.github.io/editor.md/)\r\n\r\n[内容排版 typo.css](https://github.com/sofish/typo.css)\r\n\r\n[动画 animate.css](https://daneden.github.io/animate.css/)\r\n\r\n[代码高亮 prism](https://github.com/PrismJS/prism)\r\n\r\n[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)\r\n\r\n[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)\r\n\r\n[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)\r\n\r\n[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)\r\n\r\n## 3、框架搭建\r\n\r\n>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)\r\n\r\n### 3.1 构建与配置\r\n\r\n**1、引入Spring Boot模块：**\r\n\r\n*  web\r\n*  Thymeleaf\r\n*  JPA\r\n*  MySQL\r\n*  Aspects\r\n*  DevTools\r\n\r\n**2、application.yml配置**\r\n\r\n*  使用 thymeleaf 3\r\n\r\n   pom.xml:\r\n\r\n```xml\r\n<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>\r\n<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>\r\n```\r\n\r\n\r\n  	application.yml:\r\n\r\n```yaml\r\nspring:\r\n  thymeleaf:\r\n    mode: HTML\r\n```\r\n\r\n*  数据库连接配置\r\n\r\n```yaml\r\nspring:\r\n  datasource:\r\n    driver-class-name: com.mysql.jdbc.Driver\r\n    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8\r\n    username: root\r\n    password: root\r\n  jpa:\r\n    hibernate:\r\n      ddl-auto: update\r\n    show-sql: true\r\n```\r\n\r\n*  日志配置\r\n\r\n   application.yml:\r\n\r\n```yaml\r\nlogging:\r\n  level:\r\n    root: info\r\n    com.imcoding: debug\r\n  file: log/imcoding.log\r\n```\r\n\r\n​	logback-spring.xml：\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<configuration>\r\n    <!--包含Spring boot对logback日志的默认配置-->\r\n    <include resource=\"org/springframework/boot/logging/logback/defaults.xml\" />\r\n    <property name=\"LOG_FILE\" value=\"${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}\"/>\r\n    <include resource=\"org/springframework/boot/logging/logback/console-appender.xml\" />\r\n\r\n    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->\r\n    <appender name=\"TIME_FILE\"\r\n              class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\r\n        <encoder>\r\n            <pattern>${FILE_LOG_PATTERN}</pattern>\r\n        </encoder>\r\n        <file>${LOG_FILE}</file>\r\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\r\n            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>\r\n            <!--保留历史日志一个月的时间-->\r\n            <maxHistory>30</maxHistory>\r\n            <!--\r\n            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志\r\n            -->\r\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\r\n                <maxFileSize>10MB</maxFileSize>\r\n            </timeBasedFileNamingAndTriggeringPolicy>\r\n\r\n        </rollingPolicy>\r\n    </appender>\r\n\r\n    <root level=\"INFO\">\r\n        <appender-ref ref=\"CONSOLE\" />\r\n        <appender-ref ref=\"TIME_FILE\" />\r\n    </root>\r\n\r\n</configuration>\r\n<!--\r\n    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）\r\n    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：\r\n\r\n        my.2017-08-01.0   80MB\r\n        my.2017-08-01.1   10MB\r\n        my.2017-08-02.0   56MB\r\n        my.2017-08-03.0   53MB\r\n        ......\r\n-->\r\n```\r\n\r\n*  生产环境与开发环境配置\r\n   *  application-dev.yml\r\n   *  application-pro.yml\r\n\r\n### 3.2 异常处理\r\n\r\n**1、定义错误页面**\r\n\r\n*  404\r\n*  500\r\n*  error\r\n\r\n**2、全局处理异常**\r\n\r\n统一处理异常：\r\n\r\n```java\r\n@ControllerAdvice\r\npublic class ControllerExceptionHandler {\r\n\r\n    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);\r\n    /**\r\n     * 异常处理\r\n     * @param request\r\n     * @param e\r\n     * @return\r\n     */\r\n    @ExceptionHandler({Exception.class})\r\n    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {\r\n\r\n        logger.error(\"Request URL : {} , Exception : {}\", request.getRequestURL(), e);\r\n\r\n        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {\r\n            throw e;\r\n        }\r\n        ModelAndView mav = new ModelAndView();\r\n        mav.addObject(\"url\", request.getRequestURL());\r\n        mav.addObject(\"exception\", e);\r\n        mav.setViewName(\"error/error\");\r\n\r\n        return mav;\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n错误页面异常信息显示处理：\r\n\r\n```html\r\n<div>\r\n    <div th:utext=\"\'&lt;!--\'\" th:remove=\"tag\"></div>\r\n    <div th:utext=\"\'Failed Request URL : \' + ${url}\" th:remove=\"tag\"></div>\r\n    <div th:utext=\"\'Exception message : \' + ${exception.message}\" th:remove=\"tag\"></div>\r\n    <ul th:remove=\"tag\">\r\n        <li th:each=\"st : ${exception.stackTrace}\" th:remove=\"tag\"><span th:utext=\"${st}\" th:remove=\"tag\"></span></li>\r\n    </ul>\r\n    <div th:utext=\"\'--&gt;\'\" th:remove=\"tag\"></div>\r\n</div>\r\n```\r\n\r\n\r\n\r\n**3、资源找不到异常**\r\n\r\n```java\r\n@ResponseStatus(HttpStatus.NOT_FOUND)\r\npublic class NotFoundExcepiton extends RuntimeException {\r\n\r\n    public NotFoundExcepiton() {\r\n    }\r\n\r\n    public NotFoundExcepiton(String message) {\r\n        super(message);\r\n    }\r\n\r\n    public NotFoundExcepiton(String message, Throwable cause) {\r\n        super(message, cause);\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### 3.3 日志处理\r\n\r\n**1、记录日志内容**\r\n\r\n*  请求 url\r\n*  访问者 ip\r\n*  调用方法 classMethod\r\n*  参数 args\r\n*  返回内容\r\n\r\n**2、记录日志类：**\r\n\r\n```java\r\n@Aspect\r\n@Component\r\npublic class LogAspect {\r\n\r\n    private final Logger logger = LoggerFactory.getLogger(this.getClass());\r\n\r\n    /**\r\n     * 定义切面\r\n     */\r\n    @Pointcut(\"execution(* com.imcoding.web.*.*(..))\")\r\n    public void log() {\r\n    }\r\n\r\n    @Before(\"log()\")\r\n    public void doBefore(JoinPoint joinPoint) {\r\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\r\n        HttpServletRequest request = attributes.getRequest();\r\n        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + \".\" + joinPoint.getSignature().getName();\r\n        ReqeustLog reqeustLog = new ReqeustLog(\r\n                request.getRequestURL().toString(),\r\n                request.getRemoteAddr(),\r\n                classMethod,\r\n                joinPoint.getArgs()\r\n        );\r\n        logger.info(\"Rquest  ----- {}\",reqeustLog);\r\n    }\r\n\r\n    @After(\"log()\")\r\n    public void doAfter() {\r\n        //logger.info(\"---------- doAfter 2 ----------\");\r\n    }\r\n\r\n    @AfterReturning(returning = \"result\",pointcut = \"log()\")\r\n    public void doAtfertRturning(Object result) {\r\n        logger.info(\"Return ------ {}\",result );\r\n    }\r\n\r\n\r\n    private class ReqeustLog {\r\n        private String url;\r\n        private String ip;\r\n        private String classMethod;\r\n        private Object[] args;\r\n\r\n        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {\r\n            this.url = url;\r\n            this.ip = ip;\r\n            this.classMethod = classMethod;\r\n            this.args = args;\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"ReqeustLog{\" +\r\n                    \"url=\'\" + url + \'\\\'\' +\r\n                    \", ip=\'\" + ip + \'\\\'\' +\r\n                    \", classMethod=\'\" + classMethod + \'\\\'\' +\r\n                    \", args=\" + Arrays.toString(args) +\r\n                    \'}\';\r\n        }\r\n    }\r\n\r\n}\r\n```\r\n\r\n\r\n\r\n### 3.4 页面处理\r\n\r\n\r\n\r\n**1、静态页面导入project**\r\n\r\n**2、thymeleaf布局**\r\n\r\n*  定义fragment\r\n*  使用fragment布局\r\n\r\n**3、错误页面美化**\r\n\r\n4、设计与规范\r\n\r\n### 4.1 实体设计\r\n\r\n**实体类：**\r\n\r\n*  博客 Blog\r\n*  博客分类 Type\r\n*  博客标签 Tag\r\n*  博客评论 Comment\r\n*  用户 User\r\n\r\n\r\n\r\n**实体关系：**\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)\r\n\r\n**评论类自关联关系：**\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)\r\n\r\n**Blog类：**\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)\r\n\r\n**Type类：**\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)\r\n\r\n**Tag类：**\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)\r\n\r\n**Comment类：**\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)\r\n\r\n\r\n\r\n**User类：**\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)\r\n\r\n\r\n\r\n### 4.2 应用分层\r\n\r\n![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)\r\n\r\n### 4.3 命名约定\r\n\r\n**Service/DAO层命名约定：**\r\n\r\n*  获取单个对象的方法用get做前缀。\r\n*  获取多个对象的方法用list做前缀。\r\n*  获取统计值的方法用count做前缀。\r\n*  插入的方法用save(推荐)或insert做前缀。\r\n*  删除的方法用remove(推荐)或delete做前缀。\r\n*  修改的方法用update做前缀。\r\n\r\n\r\n\r\n\r\n![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)\r\n\r\n## 5、后台管理功能实现\r\n\r\n### 5.1 登录\r\n\r\n\r\n\r\n**1、构建登录页面和后台管理首页**\r\n\r\n**2、UserService和UserRepository**\r\n\r\n**3、LoginController实现登录**\r\n\r\n**4、MD5加密**\r\n\r\n**5、登录拦截器**\r\n\r\n### 5.2 分类管理\r\n\r\n\r\n\r\n**1、分类管理页面**\r\n\r\n**2、分类列表分页**\r\n\r\n````javascript\r\n{\r\n  \"content\":[\r\n    {\"id\":123,\"title\":\"blog122\",\"content\":\"this is blog content\"},\r\n    {\"id\":122,\"title\":\"blog121\",\"content\":\"this is blog content\"},\r\n    {\"id\":121,\"title\":\"blog120\",\"content\":\"this is blog content\"},\r\n    {\"id\":120,\"title\":\"blog119\",\"content\":\"this is blog content\"},\r\n    {\"id\":119,\"title\":\"blog118\",\"content\":\"this is blog content\"},\r\n    {\"id\":118,\"title\":\"blog117\",\"content\":\"this is blog content\"},\r\n    {\"id\":117,\"title\":\"blog116\",\"content\":\"this is blog content\"},\r\n    {\"id\":116,\"title\":\"blog115\",\"content\":\"this is blog content\"},\r\n    {\"id\":115,\"title\":\"blog114\",\"content\":\"this is blog content\"},\r\n    {\"id\":114,\"title\":\"blog113\",\"content\":\"this is blog content\"},\r\n    {\"id\":113,\"title\":\"blog112\",\"content\":\"this is blog content\"},\r\n    {\"id\":112,\"title\":\"blog111\",\"content\":\"this is blog content\"},\r\n    {\"id\":111,\"title\":\"blog110\",\"content\":\"this is blog content\"},\r\n    {\"id\":110,\"title\":\"blog109\",\"content\":\"this is blog content\"},\r\n    {\"id\":109,\"title\":\"blog108\",\"content\":\"this is blog content\"}],\r\n  \"last\":false,\r\n  \"totalPages\":9,\r\n  \"totalElements\":123,\r\n  \"size\":15,\r\n  \"number\":0,\r\n  \"first\":true,\r\n  \"sort\":[{\r\n    \"direction\":\"DESC\",\r\n    \"property\":\"id\",\r\n    \"ignoreCase\":false,\r\n    \"nullHandling\":\"NATIVE\",\r\n    \"ascending\":false\r\n  }],\r\n  \"numberOfElements\":15\r\n}\r\n````\r\n\r\n\r\n\r\n**3、分类新增、修改、删除**\r\n\r\n### 5.3 标签管理\r\n\r\n### 5.4 博客管理\r\n\r\n\r\n\r\n**1、博客分页查询**\r\n\r\n**2、博客新增**\r\n\r\n**3、博客修改**\r\n\r\n**4、博客删除**\r\n\r\n## 6、前端展示功能实现\r\n\r\n### 6.1 首页展示\r\n\r\n\r\n\r\n**1、博客列表**\r\n\r\n**2、top分类**\r\n\r\n**3、top标签**\r\n\r\n**4、最新博客推荐**\r\n\r\n**5、博客详情**\r\n\r\n**1、Markdown 转换 HTML**\r\n\r\n*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)\r\n*  pom.xml引用commonmark和扩展插件\r\n\r\n```xml\r\n<dependency>\r\n   <groupId>com.atlassian.commonmark</groupId>\r\n   <artifactId>commonmark</artifactId>\r\n   <version>0.10.0</version>\r\n</dependency>\r\n<dependency>\r\n   <groupId>com.atlassian.commonmark</groupId>\r\n   <artifactId>commonmark-ext-heading-anchor</artifactId>\r\n   <version>0.10.0</version>\r\n</dependency>\r\n<dependency>\r\n   <groupId>com.atlassian.commonmark</groupId>\r\n   <artifactId>commonmark-ext-gfm-tables</artifactId>\r\n   <version>0.10.0</version>\r\n</dependency>\r\n```\r\n\r\n\r\n\r\n**2、评论功能**\r\n\r\n\r\n\r\n*  评论信息提交与回复功能\r\n*  评论信息列表展示功能\r\n*  管理员回复评论功能\r\n\r\n\r\n### 6.2 分类页\r\n\r\n### 6.3 标签页\r\n\r\n### 6.4 归档页\r\n\r\n### 6.5 关于我\r\n\r\n\r\n\r\n\r\n\r\n', '2020-02-11 15:26:08', 'https://z3.ax1x.com/2021/02/17/y2SX3d.jpg', '原创', '', '', '', '测试文章排列', '2020-02-11 15:26:08', '233', '3', '1', '在服务器上配置jdk，安装Tomcat和mysql。没有jdk什么Java程序也运行不了，所以首先安装jdk并配置系统变量。 Tomcat可装可不装，SpringBoot项目有内置的Tomcat。mysql是必须要的，不然程序写来干嘛呢......');
INSERT INTO `t_blog` VALUES ('19', '', '', '- 1. 1、dsfsdf\r\n- 2. 2、\r\n- 3. 3...- ', '2020-02-03 20:06:00', 'https://z3.ax1x.com/2021/02/16/ycJ7rt.jpg', '原创', '', '', '', '测试凑数2', '2020-02-03 20:06:00', '235', '3', '1', '在服务器上配置jdk，安装Tomcat和mysql。没有jdk什么Java程序也运行不了，所以首先安装jdk并配置系统变量。 Tomcat可装可不装，SpringBoot项目有内置的Tomcat。mysql是必须要的，不然程序写来干嘛呢......');
INSERT INTO `t_blog` VALUES ('21', '', '', '## 一、h2\r\n- ### h3\r\n1. 	啦啦啦垒垒垒\r\n2. 	谢谢谢谢谢谢\r\n3. 	谢谢谢谢谢谢\r\n\r\n------------\r\n\r\n\r\n- ### h3\r\n1. 	惺惺惜惺惺\r\n2. 	谢谢谢谢谢谢\r\n3. 	谢谢谢谢谢谢\r\n4. 	谢谢谢谢谢谢\r\n\r\n------------\r\n\r\n\r\n- ### h3\r\n	谢谢谢谢谢谢\r\n	谢谢谢谢谢谢\r\n\r\n------------\r\n\r\n\r\n\r\n## 二、h2\r\n详情请看下面表格：&hearts;\r\n\r\n2021-02-05 22:03:07 星期五\r\n\r\n| 123123  | 123213  |\r\n| ------------ | ------------ |\r\n| sdfsdf  | sdfsdf  |\r\n\r\n![](https://i.853tv.cn/imgs/2021/02/4c052368229fda4f.jpg)\r\n\r\n```java\r\n@Controller\r\n@RequestMapping(\"/front\")\r\npublic class BlogController {\r\n\r\n    @Autowired\r\n    private BlogsService blogsService;\r\n\r\n    @RequestMapping(\"/blog/{id}\")\r\n    public String DisplayBlogById(@PathVariable Long id,Model model){\r\n        Blog blog = blogsService.getBlog_front(id);\r\n        model.addAttribute(\"blog\",blog);\r\n        return \"front/blog\";\r\n    }\r\n}\r\n```\r\n\r\n\r\n', '2020-02-05 21:51:55', 'https://z3.ax1x.com/2021/02/17/y2SjgA.jpg', '原创', '', '', '', 'markdown测试', '2020-02-05 21:51:55', '1', '2', '1', '啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦C++ ');
INSERT INTO `t_blog` VALUES ('23', '', '', '## 【题目详情】\r\n\r\n当 A 的子数组 A[i], A[i+1], ..., A[j] 满足下列条件时，我们称其为湍流子数组：\r\n\r\n- 若 i <= k < j，当 k 为奇数时， A[k] > A[k+1]，且当 k 为偶数时，A[k] < A[k+1]；\r\n- 或 若 i <= k < j，当 k 为偶数时，A[k] > A[k+1] ，且当 k 为奇数时， A[k] < A[k+1]。\r\n\r\n也就是说，如果比较符号在子数组中的每个相邻元素对之间翻转，则该子数组是湍流子数组。\r\n\r\n返回 A 的最大湍流子数组的长度。\r\n\r\n------------\r\n\r\n\r\n示例 1：\r\n输入：[9,4,2,10,7,8,8,1,9]\r\n输出：5\r\n解释：(A[1] > A[2] < A[3] > A[4] < A[5])\r\n\r\n示例 2：\r\n输入：[4,8,12,16]\r\n输出：2\r\n\r\n示例 3：\r\n输入：[100]\r\n输出：1\r\n\r\n提示：\r\n1 <= A.length <= 40000\r\n0 <= A[i] <= 10^9\r\n\r\n------------\r\n\r\n## 【思路】\r\n- 将湍流抽象成一个在直角坐标系上的 正整数集的函数 ，有以下三种情况：\r\n- 1、（垂直于Y轴函数）无极值，垂直于Y轴，最长湍流为1\r\n- 2、（阶梯型函数）无极值，不垂直于Y轴，最长湍流为2\r\n- 3、（尖波浪形函数）有极值，最长湍流为 \"连续\"的极值点的最大个数+2\r\n\r\n## 【代码实现 /C++】\r\n\r\n```cpp\r\nclass Solution {\r\npublic:\r\n    int maxTurbulenceSize(vector<int>& arr) {\r\n        //1、边界处理\r\n        if(arr.size()==1)   return arr.size();\r\n        if(arr.size()==2 && arr[0] == arr[1])   return 1;\r\n        if(arr.size()==2 && arr[0] != arr[1])   return 2;\r\n\r\n        int ans = 0;\r\n        int cur = 0;\r\n\r\n        //2、遍历数组\r\n        bool flag = true;\r\n        for(int i=1;i<arr.size()-1;i++){\r\n            //记录\"连续\"的极值点的最大个数\r\n            if(arr[i]>arr[i-1] && arr[i]>arr[i+1]){\r\n                cur++;\r\n            }\r\n            else if(arr[i]<arr[i-1] && arr[i]<arr[i+1]){\r\n                cur++;\r\n            }\r\n            else{\r\n                cur = 0;\r\n            }\r\n            ans = max(ans,cur);\r\n\r\n            //判断是否垂直于y轴\r\n            if(flag==true && arr[i]!=arr[i-1]){\r\n                flag = false;\r\n            }\r\n        }\r\n        //若没有极值点,且垂直于y轴\r\n        if(ans == 0 && flag == true){\r\n            return 1;\r\n        } \r\n        //若没有极值点,不垂直于y轴\r\n        if(ans == 0 && flag == false){\r\n            return 2;\r\n        }\r\n        //若有极值点\r\n        return ans+2;\r\n    }\r\n};\r\n```\r\n\r\n------------\r\n\r\n\r\n**难度一般，思路+代码 用时10分种**\r\n\r\n**时间复杂度：O(n)**\r\n\r\n**空间复杂度：O(1)**\r\n', '2020-02-09 23:04:59', 'https://z3.ax1x.com/2021/02/16/ycJOIS.jpg', '原创', '', '', '', '【LeetCode】978. 最长湍流子数组', '2021-04-16 16:32:35', '1226', '41', '1', '【leetcode 中等题】\r\n刷题思路 + 代码（带注释）\r\n时间复杂度：O(n) \r\n空间复杂度：O(1)');
INSERT INTO `t_blog` VALUES ('24', '', '', '123123', '2020-05-10 17:19:57', 'https://z3.ax1x.com/2021/02/16/ycJvGQ.jpg', '翻译', '', '', '', '测试关闭评论', '2020-05-10 17:19:57', '0', '3', '1', '123123');
INSERT INTO `t_blog` VALUES ('25', '', '', '\r\n[[在线转PDF]][https://www.aconvert.com/cn/pdf/]\r\n[https://www.aconvert.com/cn/pdf/]: https://www.aconvert.com/cn/pdf/ \"在线转PDF\"\r\n\r\n[在线转PDF](https://www.aconvert.com/cn/pdf/ \"在线转PDF\")', '2020-03-14 17:19:10', 'https://z3.ax1x.com/2021/02/16/ycJjPg.jpg', '原创', '', '', '', '测试链接', '2020-03-14 17:19:10', '1', '1', '1', '123');
INSERT INTO `t_blog` VALUES ('26', '', '', '### BUG重现\r\n- 本博客项目在开发调试时，采用的是idea启动springBoot自带tomcat服务器，访问网站一切正常！\r\n\r\n- 本博客项目部署到云服务器中，采用的是运行jar的方式，在访问其他资源时一切正常，但是点开每一篇的博客中时，博客的“评论区”却无法正常显示，发现报500错误。\r\n\r\n[![1](https://s3.ax1x.com/2021/02/15/y6W0bT.png \"1\")](https://s3.ax1x.com/2021/02/15/y6W0bT.png \"1\")\r\n\r\n[![2](https://s3.ax1x.com/2021/02/15/y6WwrV.png \"2\")](https://s3.ax1x.com/2021/02/15/y6WwrV.png \"2\")\r\n\r\n### 解决步骤\r\n\r\n- 排除其余错误情况（如：数据库访问、Thymeleaf模板渲染、代码错误）。\r\n\r\n- 聚焦到URL错误的情况（如：可能是后台传值的时候出现错误）\r\n\r\n- 发现在错误资源区域（本博客的评论区）的Controller代码中返回页面的代码：\r\n```java\r\nreturn \"/front/blog :: commentList\"\r\n```\r\n中路径前面的斜杠应该去除掉。\r\n\r\n- 如：\r\n```java\r\nreturn \"front/blog :: commentList\";\r\n```\r\n\r\n[![3](https://s3.ax1x.com/2021/02/15/y6fUFe.png \"3\")](https://s3.ax1x.com/2021/02/15/y6fUFe.png \"3\")\r\n\r\n**正常访问，解决成功~**\r\n\r\n', '2020-05-15 22:10:33', 'https://z3.ax1x.com/2021/01/21/s4vgGq.jpg', '原创', '', '', '', '【Springboot踩坑】——运行jar包，访问资源报500错误', '2020-05-15 22:10:33', '1014', '4', '1', '在本博客项目进行到尾声时，即将项目部署到云服务器时。出现了以下BUG：\r\n本SpringBoot项目使用thymeleaf打成jar包，访问资源（博客评论区）时候报500错误');
INSERT INTO `t_blog` VALUES ('27', '', '', '## 【题目详情】\r\n\r\n给定一个范围在  1 ≤ a[i] ≤ n ( n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。\r\n\r\n找到所有在 [1, n] 范围之间没有出现在数组中的数字。\r\n\r\n您能在不使用额外空间且时间复杂度为O(n)的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。\r\n\r\n------------\r\n\r\n**示例:**\r\n\r\n输入:\r\n[4,3,2,7,8,2,3,1]\r\n\r\n输出:\r\n[5,6]\r\n\r\n------------\r\n\r\n## 【思路】\r\n##### 【解法一】：桶排序 （此处不做思路详解）\r\n	时间复杂度：O(n)\r\n	空间复杂度：O(n)\r\n\r\n\r\n##### 【解法二】：原地Hash \r\n\r\n由于数组nums中元素的取值范围为1-nums.size(),所以数组nums**最大值为max = nums.size()**，最小值为1。\r\n\r\n数组的元素加上max后都大于max。根据这一特性，原地hash算法描述如下：\r\n\r\n- 1、[标记]---遍历数组，将当前元素作为数组下标，在该下标所在的元素值中加上 max。\r\n\r\n- 2、[取值]---由此一轮遍历后，范围1-max之间没有出现在数组中的数字所对应的下标元素将是小于等于max的。因此只需要记录该情况的元素即可。\r\n\r\n## 【代码实现 /C++】\r\n\r\n```cpp\r\nclass Solution {\r\npublic:\r\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\r\n        /*\r\n            【解法二】：原地hash：\r\n        */\r\n\r\n        vector<int> ans;            \r\n        int max = nums.size();          //该数组中最大的元素\r\n\r\n        //[标记]\r\n        for(int i=0;i<nums.size();i++){\r\n            //若当前元素大于max，则减去max后取得“真值”,并以此为下标，进行标记\r\n            if(nums[i]>max){\r\n                int temp = nums[i]-max;\r\n                if(nums[temp-1] <= max)\r\n                    nums[temp-1] += max;\r\n            }\r\n            //若当前元素小于等于max，则说明当前元素为“真值”，以此为下标，进行标记\r\n            else{\r\n                if(nums[nums[i]-1] <= max)\r\n                    nums[nums[i]-1] += max;\r\n            }\r\n        }\r\n\r\n        //[取值]\r\n        for(int i=0;i<nums.size();i++){\r\n            if(nums[i]<=max){\r\n                ans.push_back(i+1);\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n```\r\n\r\n------------\r\n\r\n\r\n**难度简单，思路+代码 用时15分种**\r\n\r\n**时间复杂度：O(n)**\r\n\r\n**空间复杂度：O(1)**\r\n', '2020-06-10 14:09:27', 'https://z3.ax1x.com/2021/02/16/ycJx2j.jpg', '原创', '', '', '', '【LeetCode】448. 找到所有数组中消失的数字', '2020-06-10 14:09:27', '1013', '41', '1', '【leetcode 简单题】\r\n刷题思路 + 代码（带注释）；\r\n448. 找到所有数组中消失的数字；\r\n时间复杂度：O(n) \r\n空间复杂度：O(1)');
INSERT INTO `t_blog` VALUES ('28', '', '', '## 一、指向函数的指针——定义：\r\n\r\n\r\n基本写法：函数返回值数据类型  (*指针变量名)(函数变量的数据类型+变量名...)；\r\n```cpp\r\n//定义一个指向函数的指针变量（可以加变量名字）\r\n	int (*p)(int *a,int n);\r\n```\r\n\r\n也可以写成：函数返回值数据类型 (*指针变量名)(函数的数据类型...)；\r\n```cpp\r\n//定义一个指向函数的指针变量 \r\n	int (*p)(int *,int);\r\n```\r\n\r\n## 二、指向函数的指针——赋值：\r\n假设定义的函数为：\r\n```cpp\r\nint findMax(int *a,int n){\r\n	int temp;\r\n	if(n==1)	return *a;\r\n	if(*a > *(a+1)){\r\n		temp = *a;\r\n		*a = *(a+1);\r\n		*(a+1) = temp;\r\n	}\r\n	return findMax(a+1,n-1);	\r\n}\r\n```\r\n\r\n指针赋值代码为：\r\n```cpp\r\n//指针指向某个具体的函数 \r\n	p = findMax;\r\n```\r\n\r\n\r\n## 三、指向函数的指针——调用：\r\n\r\n```cpp\r\n//调用该函数并打印值 \r\n	printf(\"max:%d\",(*p)(a,len));\r\n```\r\n\r\n\r\n\r\n\r\n## 四、完整代码如下：\r\n```cpp\r\n#include<stdio.h>\r\n#include<math.h>\r\n#include<string.h>\r\n\r\n//【递归找最大值】 \r\n/*\r\n	1、每次比对当前数组的前两个数字 \r\n	2、数组不断右缩小，数组的长度n也不断缩小。 \r\n	3、当n=1时，当前数组仅有一个元素，该元素就是最大值 \r\n*/ \r\nint findMax(int *a,int n){\r\n	int temp;\r\n	if(n==1)	return *a;\r\n	if(*a > *(a+1)){\r\n		temp = *a;\r\n		*a = *(a+1);\r\n		*(a+1) = temp;\r\n	}\r\n	return findMax(a+1,n-1);	\r\n}\r\n\r\nint main(){\r\n	\r\n	int a[]={1,8,2,9,3,4,5,8};\r\n	int len = sizeof(a)/sizeof(a[0]);\r\n	\r\n	//定义一个指向函数的指针变量 \r\n	int (*p)(int *,int);\r\n	//指针指向某个具体的函数 \r\n	p = findMax;\r\n	//调用该函数并打印值 \r\n	printf(\"max:%d\",(*p)(a,len));\r\n}\r\n\r\n```\r\n\r\n***如果这篇文章对你有用，欢迎收藏我的博客~谢谢***', '2021-01-17 13:38:19', 'https://z3.ax1x.com/2021/01/21/s4vNGt.jpg', '原创', '', '', '', 'C语言指针的应用——[指向函数的指针]', '2021-01-17 13:38:19', '1113', '40', '1', 'C语言指针的应用——[指向函数的指针]，该函数用递归实现了找数组中的最大值。');
INSERT INTO `t_blog` VALUES ('29', '', '', '## 一、什么是计算机网络？\r\n\r\n   将一个分散的、具有独立功能的**计算机系统**（手机、电脑...），通过**通信设备**（路由器、集线器、交换机...）与**线路**连接起来，由功能完善的**软件**实现**资源共享**和**信息传递**的系统。\r\n\r\n\r\n------------\r\n\r\n\r\n## 二、组成：\r\n- **按照组成部分：** 硬件、软件、数据\r\n\r\n- **按照工作方式：**\r\n	1. 边缘部分（计算机、服务器、摄像头...）\r\n	1. 核心部分（网络和路由器）\r\n\r\n- **按照功能组成：**\r\n	1. 资源子网：数据通信（应用层、表示层、会话层）\r\n	1. 通信子网：资源共享/数据处理（网络层、数据链路层、物理层）\r\n\r\n\r\n------------\r\n\r\n\r\n## 三、功能：\r\n- **资源共享**。硬件（打印机）、软件（下载软件）、数据（天气数据、地图数据）\r\n\r\n- **信息传递**。文件传输、邮件发送\r\n\r\n- **分布式处理**。当计算机网路中某个计算机系统的负荷过重时，可以将其处理的某个复杂任务分配给网络上的其他计算机系统，从而提高利用率\r\n\r\n- **提高可靠性**。计算机网络中的各台计算机可以通过网络互为替代机，当一个机器宕机了则有另一个机器进行替代\r\n\r\n- **负载均衡**\r\n\r\n\r\n------------\r\n\r\n\r\n## 四、分类：\r\n- **按照分布范围**：广域网（交换技术）、城域网（以太网技术）、局域网（广播技术）、个人网\r\n\r\n\r\n- **按照交换技术**：电路交换、报文交换、分组交换\r\n\r\n\r\n- **按照拓扑结构**：总线型（广播式网络）、星型、环型、网状型（广域网、点对点网络）\r\n\r\n\r\n- **按照传输技术**：广播式网络、点对点网络（分组存储转发和路由选择）\r\n\r\n\r\n------------\r\n\r\n\r\n## 五、性能指标\r\n\r\n- **速率：** 指的是连接在计算机网络中的发送端（主机、交换机、路由器）在数字信道上传输数据的速率。又称为数据率或比特率，单位是比特/秒（b/s）\r\n\r\n- **带宽：** 指的是连接在计算机网络中的发送端（主机、交换机、路由器）在数字信道上可以传送的“最高速率”，单位是比特/秒（b/s）\r\n\r\n> *Ps：这里可以模拟一个场景：A地（出发地）通过一条高速公路到达B地（目的地），共有三条单向车道。若一秒钟有一辆车可以从A地出发则可以视作“速率”为1b/s；但是有三条车道，所以可以一秒钟容纳三辆车从A地出发，则“带宽”为3b/s*\r\n\r\n- **吞吐量：** 在单位时间内通过某个网络信道或网络端口的数据量，单位是比特/秒（b/s）\r\n\r\n- **时延：**\r\n	1. 发送时延：发送时延=数据长度/信道带宽\r\n	1. 传播时延：传播时延=信道长度/电磁波在信道上的速率\r\n	1. 排队时延：等待进入处理以及离开处理的时间\r\n	1. 处理时延：进行处理的时间\r\n\r\n- **时延带宽积：** 时延带宽积（bit） = 传播时延(s) * 带宽(b/s)表示以比特为单位的链路长度。\r\n\r\n> 比如A到B的带宽为2b/s，传播时延为8s。那么链路长度为16bit\r\n\r\n\r\n- **往返时延RTT：** 从发送端发送的第一个数据，到发送端接收到接收端的第一个确认所经历的时延。\r\n\r\n> RTT = 往返传播时间*2 + 排队时延 + 处理时间\r\n\r\n- **利用率：**\r\n\r\n	1. 信道利用率：= 数据在信道上通过的时间 / 数据在信道上通过的时间 + 无数据在信道上的时间\r\n	2. 网络利用率：所有信道的利用率加起来再求平均值\r\n\r\n\r\n------------\r\n\r\n\r\n*相关博客：*\r\n\r\n[【计算机网络】——[概述]（一）](http://127.0.0.1:8080/front/blog/29 \"【计算机网络】——[概述]（一）\")', '2020-06-17 21:59:54', 'https://z3.ax1x.com/2021/02/17/y2pSDP.jpg', '原创', '', '', '', '【计算机网络】——[概述]（一）', '2020-06-17 21:59:54', '1111', '3', '1', '描述了计算机网络的第一个部分：概述。包括了：计算机网络是什么？计算机网络的功能、组成、分类和性能指标');
INSERT INTO `t_blog` VALUES ('30', '', '', '## 一、题目：\r\n***编写一个函数，不用临时变量，直接交换numbers = [a, b]中a与b的值。***\r\n\r\n示例：\r\n\r\n输入: numbers = [1,2]\r\n输出: [2,1]\r\n\r\n提示：\r\nnumbers.length == 2\r\n\r\n\r\n\r\n------------\r\n\r\n\r\n## 二、解法：\r\n\r\n### 2.1、解法1：\r\n\r\n由于a和b是整数，可能异号，同号，或是至少有一个为0，那么可以分情况进行 “差和法”：\r\n\r\n- 若a和b同号，或其中一个为0。代码如下：\r\n\r\n```cpp\r\nif(numbers[0] >= 0 && numbers[1] >= 0){\r\n    //以防溢出，将二者之差(a-b)存储在第二个位置中，此时a>=b\r\n    numbers[1] = numbers[0] - numbers[1];\r\n    //由于a-(a-b) == a-a+b == b ，故将a-(a-b)存储在第一个位置中\r\n    numbers[0] = numbers[0] - numbers[1];\r\n    //由于(a-b)+b == a,故将(a-b)+b存储在第二个位置中\r\n    numbers[1] = numbers[1] + numbers[0];\r\n}\r\n```\r\n\r\n- 若a和b异号。代码如下：\r\n\r\n```cpp\r\n //以防溢出，将二者之和(a+b)存储在第二个位置中\r\n numbers[1] = numbers[0] + numbers[1];\r\n //由于(a+b)-a == b,故将(a+b)-a 存储在第一个位置中\r\n numbers[0] = numbers[1] - numbers[0];\r\n //由于(a+b)-b == a，故将(a+b)-b 存储在第二个位置中\r\n numbers[1] = numbers[1] - numbers[0];\r\n```\r\n\r\n> Ps:为什么要分情况呢？因为int的类型为-2147483648~2147483647。若a+b大于上限或小于，则会出现溢出的bug。\r\n\r\n### 2.2、解法2：\r\n\r\n根据异或的规则：\r\na ^ b ^ b = a\r\na ^ b ^ a = b\r\na ^ a = 0\r\n0 ^ a = a\r\n解法如下：\r\n\r\n- 将a^b放入第一个位置。此时第一个位置为a^b，第二个位置为b：\r\n\r\n```cpp\r\nnumbers[0] = numbers[0] ^ numbers[1];\r\n```\r\n\r\n- 将a^b^b放入第二个位置。此时第一个位置为a^b，第二个位置为a：\r\n\r\n```cpp\r\nnumbers[1] = numbers[0] ^ numbers[1];\r\n```\r\n\r\n- 将a^b^a放入第一个位置。此时第一个位置为b，第二个位置为a：\r\n\r\n```cpp\r\nnumbers[0] = numbers[0] ^ numbers[1];\r\n```\r\n\r\n------------\r\n\r\n\r\n## 三、总结：\r\n\r\n以上两种方法中第一种方法是容易想到且已经掌握，需要加强第二种方法即“异或”的使用。相似题目：[【leetcode】位运算题目大汇总](https://leetcode-cn.com/tag/bit-manipulation/ \"【leetcode】位运算题目大汇总\")', '2020-09-20 22:53:44', 'https://z3.ax1x.com/2021/01/21/s4vNGt.jpg', '原创', '', '', '', '【leetcode】16.01. 交换数字', '2020-09-20 22:53:44', '9', '41', '1', '【leetcode 简单题】\r\n刷题思路 + 代码（带注释）；\r\n16.01. 交换数字；');
INSERT INTO `t_blog` VALUES ('31', '', '', '## 一、什么是AOP？\r\n\r\n面向切面编程（AOP是Aspect Oriented Program的首字母缩写）。**允许以一种统一的方式在运行时期在想要的地方插入一些特定的逻辑。**\r\n\r\n> 假如没有aop，在做日志处理的时候，我们会在每个方法中添加日志处理。但大多数的日子处理代码是相同的，为了实现代码复用，我们可能把日志处理抽离成一个新的方法。但是这样我们仍然必须手动插入这些方法。\r\n\r\n> 但这样两个方法就是强耦合的，假如此时我们不需要这个功能了，或者想换成其他功能，那么就必须一个个修改。\r\n\r\n> 通过动态代理，可以在指定位置执行对应流程。这样就可以将一些横向的功能抽离出来形成一个独立的模块，然后在指定位置插入这些功能。这样的思想，被称为面向切面编程，亦即AOP。\r\n\r\n\r\n**AOP的应用场景：**\r\n1、日志记录\r\n\r\n2、权限验证\r\n\r\n3、效率检测\r\n\r\n4、事务管理（我们知道通过配置文件或者注解@Tranactional 就可以开启数据库事务了。那么之所以达到这样的效果就是AOP的功劳了。）\r\n\r\n\r\n## 二、AOP实操（日志记录）\r\n下文以本博客开发时“日志记录”为例子，进行AOP的实操：\r\n\r\n### 1、定义切面类，实现切面的功能\r\n\r\n### 代码：\r\n\r\n```java\r\n@Aspect\r\n@Component\r\npublic class LogAspect {\r\n\r\n}\r\n```\r\n\r\n### 简要说明：\r\n\r\n@Aspect：定义切面类\r\n\r\n@Component：把该pojo(java对象)实例化到spring容器中，相当于配置文件中配置对象\r\n\r\n### 2、在该类中定义一个切面\r\n\r\n### 代码：\r\n```java\r\n    @Pointcut(\"execution(* com.hpl.blog.web.front.*.*(..))\")\r\n    public void log(){}\r\n```\r\n\r\n### 简要说明：\r\n@Pointcut(\"拦截器\")：定义一个切面， execution是指拦截哪些类（访问修饰符 包名.类名.方法）\r\n\r\n这里是拦截在**包名 com.hpl.blog.web.front**下**所有类**中**任意修饰符**的**方法**请求。\r\n\r\n### 3、在切面前后进行逻辑操作\r\n\r\n### 代码：\r\n\r\n```java\r\n//切面之前执行\r\n    @Before(\"log()\")\r\n    public void doBefore(JoinPoint joinPoint){      //JoinPoint对象封装了SpringAop中切面方法的信息\r\n        logger.info(\"-----------doBefore...----------\");\r\n\r\n        //1、接收请求的上下文\r\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\r\n        HttpServletRequest request = attributes.getRequest();\r\n\r\n        //2、获取url和ip\r\n        String url = request.getRequestURL().toString();\r\n        String ip = request.getRemoteAddr();\r\n        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + \".\" + joinPoint.getSignature().getName();\r\n        Object[] args = joinPoint.getArgs();\r\n\r\n        //3、传入到自定义的RequestLog对象中\r\n        RequestLog requestLog = new RequestLog(url,ip,classMethod,args);\r\n        logger.info(\"Request: {}\",requestLog);\r\n    }\r\n\r\n    //切面之后执行\r\n    @After(\"log()\")\r\n    public void doAfter(){\r\n        logger.info(\"-----------doAfter----------\");\r\n    }\r\n\r\n    //切面的返回值\r\n    @AfterReturning(returning = \"res\",pointcut = \"log()\")\r\n    public void AfterReturn(Object res){\r\n        logger.info(\"-----------AfterReturn----------\");\r\n        logger.info(\"Result: {}\",res.toString());\r\n    }\r\n\r\n    //定义一个内部类，记录访问切面时的相关信息\r\n    private class RequestLog{\r\n        private String url;             //url\r\n        private String ip;              //访问者\r\n        private String classMethod;    //调用的方法\r\n        private Object[] args;          //传递的参数\r\n\r\n        //构造传参赋值\r\n        public RequestLog(String url, String ip, String classMethod, Object[] args) {\r\n            this.url = url;\r\n            this.ip = ip;\r\n            this.classMethod = classMethod;\r\n            this.args = args;\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"{\" +\r\n                    \"url=\'\" + url + \'\\\'\' +\r\n                    \", ip=\'\" + ip + \'\\\'\' +\r\n                    \", classMethod=\'\" + classMethod + \'\\\'\' +\r\n                    \", args=\" + Arrays.toString(args) +\r\n                    \'}\';\r\n        }\r\n    }\r\n```\r\n\r\n### 简要说明：\r\n\r\n@Before(\"切面\"): 在切面之前执行某些逻辑；\r\n\r\n@After(\"切面\")： 在切面之后执行某些逻辑；\r\n\r\n@AfterReturning(returning = \"返回参数\",pointcut = \"切面\")', '2021-01-23 17:20:03', 'https://z3.ax1x.com/2021/02/16/ycJjPg.jpg', '原创', '', '', '', '【SpringBoot】---AOP的概念及应用', '2021-01-23 17:20:03', '1055', '5', '1', '本文针对：1、什么是AOP   2、AOP实操 进行详解');
INSERT INTO `t_blog` VALUES ('32', '', '', '## 1、C语言中常见的位运算\r\n\r\n|符号 | 名称  | 描述  |\r\n| ---------| ------------ | ------------ |\r\n| ~ | 按位取反  | 若二进制a=1,则 ~a=0 |\r\n| &  | 按位与  | 若二进制a和b其中一个为0，则a&b为0 |\r\n|  ^ | 按位异或 | 二进制a和b不同，则a^b为1 |\r\n\r\n## 2、操作符的优先次序\r\n\r\n![运算符优先级](https://s3.ax1x.com/2021/03/04/6ViHgK.png \"运算符优先级\")\r\n\r\n\r\n## 3、位运算实操\r\n\r\n```c\r\n#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n\r\n\r\n/*\r\n	【逻辑位运算符】\r\n	1、~ 按位取反： 如果a为0，~a为1\r\n	2、& 按位与 ：  a和b其中一个为0，a & b为0\r\n	3、^ 按位异或： a和b不同结果为1，否则为0 \r\n	4、| 按位或：   a和b其中一个为1，a | b为1 \r\n*/ \r\n\r\n\r\n//1、~ 按位取反\r\nvoid Bitwise_negation(){\r\n	printf(\"\\n\\n====================按位取反====================\\n\");\r\n	short a = 8; 				//源码 0000 0000 0000 1000，补码 0000 0000 0000 1000 = 8 \r\n	printf(\"~%d = %d\\n\",a,~a);	//源码 1111 1111 1111 0111，补码 -0000 0000 0000 1001 = -9 \r\n	\r\n	short b = -9;				//源码 1000 0000 0000 1001，补码 1111 1111 1111 0111\r\n	printf(\"~%d = %d\\n\",b,~b);	//源码 0000 0000 0000 1000，补码 0000 0000 0000 1000 = 8 \r\n} \r\n\r\n\r\n//2、& 按位与\r\nvoid Bitwise_AND(){\r\n	printf(\"\\n\\n====================按位与====================\\n\");\r\n	short a = 8;					//补码 0000 0000 0000 1000 \r\n	short b = 9;					//补码 0000 0000 0000 1001\r\n	printf(\"%d&%d = %d\\n\",a,b,a&b);	//补码 0000 0000 0000 1000\r\n	\r\n	//判断是否为偶数\r\n	short c = -10;		//7的补码： 0000 0000 0000 0111  10的补码： 0000 0000 0000 1010 \r\n	\r\n	//7&1的补码 0000 0000 0000 0001  \r\n	if(c&1){		\r\n		printf(\"%d是奇数\",c);\r\n	}\r\n	//10&1的补码：0000 0000 0000 0000 \r\n	else{\r\n		printf(\"%d是偶数\",c);\r\n	} \r\n}\r\n\r\n//3、& 按位异或 \r\nvoid Bitwise_XOR(){\r\n	printf(\"\\n\\n====================按位异或====================\\n\");\r\n	short a = 8;								//补码 0000 0000 0000 1000 \r\n	short b = 9;								//补码 0000 0000 0000 1001\r\n	printf(\"%d^%d = %d\\n\",a,b,a^b);				//补码 0000 0000 0000 0001\r\n	printf(\"%d^%d^%d = %d\\n\",a,b,a,a^b^a);		//补码 0000 0000 0000 1001 \r\n	printf(\"%d^%d^%d = %d\\n\",a,b,b,a^b^b);		//补码 0000 0000 0000 1000 \r\n}\r\n\r\n//4、& 按位或 \r\nvoid Bitwise_OR(){\r\n	printf(\"\\n\\n====================按位或====================\\n\");\r\n	short a = 14;					//补码 0000 0000 0000 1110 \r\n	short b = 9;					//补码 0000 0000 0000 1001\r\n	printf(\"%d|%d = %d\\n\",a,b,a|b);	//补码 0000 0000 0000 1111\r\n}\r\n\r\n\r\nint main(){\r\n	Bitwise_negation();\r\n	Bitwise_AND();\r\n	Bitwise_XOR();\r\n	Bitwise_OR();\r\n}\r\n\r\n```\r\n\r\n**运行结果如下：**\r\n\r\n![运行结果](https://s3.ax1x.com/2021/03/04/6VFhM8.png \"运行结果\")\r\n\r\n\r\n## 4、位运算Leetcode题目\r\n\r\n[【leetcode】16.01. 交换数字](http://127.0.0.1:8080/front/blog/30 \"【leetcode】16.01. 交换数字\")', '2021-03-04 11:16:45', 'https://z3.ax1x.com/2021/02/17/y2SX3d.jpg', '转载', '', '', '', 'C语言位运算的应用', '2021-05-20 09:41:39', '10', '40', '1', '1、C语言中的位运算 2、操作符的优先次序 3、位运算实操 4、位运算Leetcode题目');
INSERT INTO `t_blog` VALUES ('33', '', '', '1', '2020-03-04 11:30:37', 'https://z3.ax1x.com/2021/01/21/s4vNGt.jpg', '原创', '', '', '', 'test草稿', '2020-03-04 11:30:37', '2', '41', '1', '11');
INSERT INTO `t_blog` VALUES ('34', '', '', '## 一、背景知识说明\r\n\r\n一个负数在计算机里面是使用补码来存储的，同时你会发现，很多地方会用到负整数，所以掌握两者的变化非常重要。\r\n\r\n首先对于有符号数，第一位的位置是表示的正负，为1时是负数，为0时是正数。\r\n其次，正数的原码、补码、反码一致。负数的补码是其原码取反+1\r\n\r\n## 二、例子说明\r\n\r\n- 首先，定义一个int型的负整数-4\r\n\r\n```c\r\nint a = -4;\r\n	/*\r\n		十进制数-4的原码为（1000 0000 0000 0000 | 0000 0000 0000 0100）\r\n		补码为：（1111 1111 1111 1111 | 1111 1111 1111 1100） \r\n				（11 111 111 111 111 111 111 111 111 111 100 ）\r\n	*/\r\n```\r\n\r\n- 将-4的补码四个四个一组:（1111 1111 1111 1111 | 1111 1111 1111 1100），转换为十六进制：\r\n\r\n```c\r\n	printf(\"十六进制：%x\\n\",a);		//-4的补码四个一组转为十六进制：（ffff fffc）\r\n```\r\n\r\n- 将-4的补码三个三个一组（11 111 111 111 111 111 111 111 111 111 100 ），转换为八进制：\r\n\r\n```c\r\nprintf(\"八进制：%o\\n\",a);		//-4的补码三个一组转为八进制：（37777777774）\r\n```\r\n\r\n- 将-4的补码转换为无符号整型：\r\n\r\n```c\r\nprintf(\"无符号型：%u\\n\",a);		//-4的补码转为无符号型整数：（2^32-4）\r\n```\r\n', '2021-03-06 10:32:41', 'https://z3.ax1x.com/2021/01/21/s4vNGt.jpg', '原创', '', '', '', 'C语言负整数转换进制原理', '2021-03-06 10:32:41', '4', '40', '1', '本博客模拟了负整数转换为十六进制、八进制、无符号整型的过程');
INSERT INTO `t_blog` VALUES ('35', '', '', '## 1、插入排序\r\n### 1.1 直接插入排序\r\n\r\n```c\r\n//【插入排序】有过程 \r\nvoid InsertSort(Elemtype a[],int n){\r\n	int i,j;\r\n	int temp;\r\n	for(int i=1;i<n;i++){\r\n		//若当前元素比前者小，则在前面找位置插入 \r\n		if(a[i]<a[i-1]){\r\n			temp = a[i];\r\n			\r\n			//1 前面的虾兵蟹将都让让 \r\n			int j=i-1;\r\n			for(j;j>=0;j--){\r\n				if(a[j] > temp){\r\n					a[j+1] = a[j];\r\n				}\r\n				else{\r\n					break;\r\n				}\r\n			}\r\n			//2 位置已经挪动好了，直接插入\r\n			a[j+1] = temp; \r\n		}\r\n			\r\n		//输出过程 \r\n		printf(\"第%d轮循环：\",i); \r\n		print(a,n);\r\n		\r\n	}\r\n} \r\n```\r\n\r\n### 1.2 希尔排序（增量反复除以2）\r\n\r\n```c\r\n//【希尔排序】（递增）有过程 \r\nvoid ShellSort(Elemtype a[],int n){\r\n	int d,i,j;\r\n	int temp;\r\n	\r\n	//1、步长变化 \r\n	for(d=n/2; d>=1; d=d/2){	\r\n		\r\n		//2、从i=增量开始，后面的每个元素进行当前子表的插入排序 \r\n		for(i = d; i<n ;i++){\r\n			\r\n			//3、当前元素比前一个元素小，则挪位 \r\n			if(a[i]<a[i-d]){\r\n				 temp = a[i];\r\n				 \r\n				 //4、挪位\r\n				 for(j = i-d ;j>=0; j = j-d){\r\n				 	//若当前元素比待插入元素temp大，则挪位 \r\n				 	if(a[j]>temp){\r\n				 		a[j+d] = a[j];\r\n				 	}\r\n				 	//若当前元素比待插入元素temp小或等于temp，则跳出循环 \r\n				 	else{\r\n				 		break;\r\n				 	} \r\n				 }\r\n				 \r\n				 //5、temp就位\r\n				 a[j+d] =  temp; \r\n			}\r\n		} \r\n		printf(\"步长为%d：\",d);\r\n		print(a,n); \r\n	}\r\n} \r\n```\r\n\r\n## 2、交换排序\r\n### 2.1 冒泡排序\r\n\r\n```c\r\n//【冒泡排序】 \r\nvoid BubbleSort2(Elemtype a[],int n){\r\n	int i,j;\r\n	bool flag = true;\r\n	\r\n	for(int i=0;i<n;i++){\r\n		flag = true;\r\n		for(int j=n-1;j>i;j--){\r\n			if(a[j] < a[j-1]){\r\n				swap(a[j],a[j-1]);\r\n				flag = false;\r\n			}\r\n		}\r\n		if(flag == true){\r\n			break;\r\n		}\r\n	} \r\n} \r\n```\r\n\r\n### 2.2 快速排序\r\n\r\n```c\r\n//【划分，每次划分确定一个元素的位置】 \r\nint Partition(int a[],int low,int high){\r\n	int pivot = a[low];\r\n	\r\n	//1、确定枢轴所在的位置\r\n	while(low<high){\r\n		\r\n		//1.1 右边找比枢轴小的元素 \r\n		while(low<high && pivot<=a[high]){\r\n			high--;\r\n		}\r\n		a[low] = a[high];\r\n		\r\n		//1.2 左边找比枢轴大的元素 \r\n		while(low<high && pivot>=a[low]){\r\n			low++;\r\n		}\r\n		a[high] = a[low];\r\n	} \r\n	//2、获得确定枢轴所在位置---low\r\n	a[low] = pivot;\r\n	return low; \r\n	\r\n} \r\n\r\n\r\n//【快速排序】 \r\nvoid QuickSort(int a[],int low,int high){\r\n	//子区间都小于或等于1个元素时，无需排序。否则进行排序 \r\n	if(low<high){\r\n		int pivot = Partition(a,low,high);\r\n		QuickSort(a,low,pivot-1);\r\n		QuickSort(a,pivot+1,high);\r\n	}\r\n} \r\n```\r\n\r\n## 3、选择排序\r\n\r\n```c\r\n\r\n//【简单选择排序】（递增）有过程 \r\nvoid SelectSort(Elemtype a[],int n){\r\n	int i,j;\r\n	\r\n	for(i=0;i<n;i++){\r\n		int min = i; \r\n		\r\n		//1、遍历a[i+1]~a[n-1],分别与a[min]比，若比a[min]小则将其下标自告奋勇当min \r\n		for(j=i+1;j<n;j++){\r\n			//比min小，交换 \r\n			if(a[min] > a[j]){\r\n				min = j;\r\n\r\n			}\r\n		}\r\n		//2、执行完第一步，min即为 a[i+1]~a[n-1]中最小的元素。若min不是i，则将其与a[i]交换 \r\n		if(min!=i) \r\n			swap(a[i],a[min]);\r\n		\r\n		printf(\"第%d次循环:\",i+1); \r\n		print(a,n); \r\n	}\r\n} \r\n```', '2021-03-10 09:16:58', 'https://z3.ax1x.com/2021/01/21/s4vNGt.jpg', '原创', '', '', '', '各类排序算法（C语言版）', '2021-03-10 09:16:58', '6', '40', '1', '1、插入排序（直接插入、希尔） 2、交换排序（冒泡、快速排序） 3、选择排序（简单选择） 4、归并排序');
INSERT INTO `t_blog_tags` VALUES ('21', '1');
INSERT INTO `t_blog_tags` VALUES ('21', '14');
INSERT INTO `t_blog_tags` VALUES ('21', '15');
INSERT INTO `t_blog_tags` VALUES ('25', '14');
INSERT INTO `t_blog_tags` VALUES ('24', '1');
INSERT INTO `t_blog_tags` VALUES ('24', '2');
INSERT INTO `t_blog_tags` VALUES ('8', '2');
INSERT INTO `t_blog_tags` VALUES ('8', '14');
INSERT INTO `t_blog_tags` VALUES ('8', '17');
INSERT INTO `t_blog_tags` VALUES ('18', '17');
INSERT INTO `t_blog_tags` VALUES ('9', '1');
INSERT INTO `t_blog_tags` VALUES ('9', '2');
INSERT INTO `t_blog_tags` VALUES ('9', '17');
INSERT INTO `t_blog_tags` VALUES ('9', '20');
INSERT INTO `t_blog_tags` VALUES ('19', '2');
INSERT INTO `t_blog_tags` VALUES ('19', '15');
INSERT INTO `t_blog_tags` VALUES ('19', '18');
INSERT INTO `t_blog_tags` VALUES ('19', '20');
INSERT INTO `t_blog_tags` VALUES ('1', '1');
INSERT INTO `t_blog_tags` VALUES ('1', '15');
INSERT INTO `t_blog_tags` VALUES ('17', '1');
INSERT INTO `t_blog_tags` VALUES ('17', '2');
INSERT INTO `t_blog_tags` VALUES ('28', '24');
INSERT INTO `t_blog_tags` VALUES ('26', '2');
INSERT INTO `t_blog_tags` VALUES ('26', '14');
INSERT INTO `t_blog_tags` VALUES ('27', '1');
INSERT INTO `t_blog_tags` VALUES ('27', '19');
INSERT INTO `t_blog_tags` VALUES ('30', '1');
INSERT INTO `t_blog_tags` VALUES ('30', '19');
INSERT INTO `t_blog_tags` VALUES ('30', '25');
INSERT INTO `t_blog_tags` VALUES ('29', '18');
INSERT INTO `t_blog_tags` VALUES ('31', '14');
INSERT INTO `t_blog_tags` VALUES ('31', '26');
INSERT INTO `t_blog_tags` VALUES ('33', '2');
INSERT INTO `t_blog_tags` VALUES ('34', '24');
INSERT INTO `t_blog_tags` VALUES ('35', '19');
INSERT INTO `t_blog_tags` VALUES ('35', '24');
INSERT INTO `t_blog_tags` VALUES ('23', '1');
INSERT INTO `t_blog_tags` VALUES ('23', '19');
INSERT INTO `t_blog_tags` VALUES ('32', '24');
INSERT INTO `t_blog_tags` VALUES ('32', '25');
INSERT INTO `t_comment` VALUES ('27', '/images/p7.jpg', '沙发沙发！！！', '2021-02-02 14:28:41.000000', '243031504@qq.com', '张一', '8', null, '');
INSERT INTO `t_comment` VALUES ('42', '/images/p7.jpg', '张一的子评论', '2021-02-08 20:18:18.221000', '243031504@qq.com', '李一一', '8', '27', '');
INSERT INTO `t_comment` VALUES ('43', '/images/p7.jpg', '我回复我自己', '2021-02-08 20:18:32.195000', '243031504@qq.com', '李一一', '8', '42', '');
INSERT INTO `t_comment` VALUES ('44', '/images/p7.jpg', '我回复李一一', '2021-02-08 20:18:51.040000', '243031504@qq.com', '王一二', '8', '43', '');
INSERT INTO `t_comment` VALUES ('45', '/images/p7.jpg', '张一的子评论2', '2021-02-08 20:19:17.325000', '243031504@qq.com', '赵一三', '8', '27', '');
INSERT INTO `t_comment` VALUES ('46', '/images/p7.jpg', '我是二楼', '2021-02-08 20:19:47.879000', '243031504@qq.com', '秦二', '8', null, '');
INSERT INTO `t_comment` VALUES ('47', '/images/p7.jpg', '三楼三楼！！', '2021-02-08 20:20:06.685000', '243031504@qq.com', '黄三', '8', null, '');
INSERT INTO `t_comment` VALUES ('48', '/images/p7.jpg', '你好啊 黄三', '2021-02-08 20:24:58.816000', '243031504@qq.com', '齐三一', '8', '47', '');
INSERT INTO `t_comment` VALUES ('49', '/images/p7.jpg', '你好呀 齐三一', '2021-02-08 20:25:16.423000', '243031504@qq.com', '黄三', '8', '48', '');
INSERT INTO `t_comment` VALUES ('50', 'https://ftp.bmp.ovh/imgs/2021/02/6380cc43e18a82c0.jpg', 'lalal', '2021-02-08 21:35:49.855000', '243031504@qq.com', '黄月月鸟龙', '8', null, '');
INSERT INTO `t_comment` VALUES ('51', 'https://ftp.bmp.ovh/imgs/2021/02/6380cc43e18a82c0.jpg', 'dsfsdf', '2021-02-08 21:35:55.290000', '243031504@qq.com', '黄月月鸟龙', '8', '50', '');
INSERT INTO `t_comment` VALUES ('52', 'https://ftp.bmp.ovh/imgs/2021/02/6380cc43e18a82c0.jpg', '黑', '2021-02-08 21:37:39.498000', '243031504@qq.com', '黄月月鸟龙', '8', '45', '');
INSERT INTO `t_comment` VALUES ('53', '/images/p7.jpg', 'asd', '2021-02-09 00:05:40.036000', '243031504@qq.com', '123123', '8', null, '');
INSERT INTO `t_comment` VALUES ('54', '/images/p7.jpg', '123123', '2021-02-09 00:06:49.182000', '243031504@qq.com', '哈哈哈', '8', '53', '');
INSERT INTO `t_comment` VALUES ('55', '/images/p7.jpg', 'sfsdfdsf', '2021-02-09 00:07:03.250000', '243031504@qq.com', '哈哈哈sdfsdf', '8', null, '');
INSERT INTO `t_comment` VALUES ('56', '/images/p7.jpg', 'sdfdfgdfg', '2021-02-09 00:07:09.864000', '243031504@qq.com', '哈哈哈sdfsdf', '8', '53', '');
INSERT INTO `t_comment` VALUES ('57', '/images/p7.jpg', '撒旦士大夫', '2021-02-09 20:24:12.245000', '243031504@qq.com', '123123', '8', null, '');
INSERT INTO `t_comment` VALUES ('58', '/images/p7.jpg', '难得看见不是用动态规划解这个题的 哈哈哈哈', '2021-02-09 23:09:52.990000', '22222222@qq.com', '曾欣薇', '23', null, '');
INSERT INTO `t_comment` VALUES ('59', '/images/p7.jpg', '我是用双指针解出来的~\n时间复杂度：O(N)\n空间复杂度：O(1)', '2021-02-09 23:11:09.014000', '22222222@qq.com', '刘六流', '23', null, '');
INSERT INTO `t_comment` VALUES ('60', 'https://ftp.bmp.ovh/imgs/2021/02/6380cc43e18a82c0.jpg', '有用动态规划实现，可是空间复杂度为O(n)，就没做题解了~', '2021-02-09 23:16:36.982000', '243031504@qq.com', '黄月月鸟龙', '23', '58', '');
INSERT INTO `t_comment` VALUES ('61', '/images/p7.jpg', '嘿嘿', '2021-02-15 20:40:59.277000', '241504@qq.com', '王微微', '23', null, '');
INSERT INTO `t_comment` VALUES ('63', 'https://ftp.bmp.ovh/imgs/2021/02/6380cc43e18a82c0.jpg', '踩踩', '2021-02-15 22:21:16.145000', '243031504@qq.com', '黄月月鸟龙', '1', null, '');
INSERT INTO `t_comment` VALUES ('64', '/images/p7.jpg', 'great!!!', '2021-02-16 14:02:05.394000', '22222222@qq.ccc', '陈银敏', '26', null, '');
INSERT INTO `t_comment` VALUES ('65', 'https://ftp.bmp.ovh/imgs/2021/02/6380cc43e18a82c0.jpg', '嘿嘿！', '2021-02-16 14:02:29.141000', '243031504@qq.com', '黄月月鸟龙', '26', '64', '');
INSERT INTO `t_comment` VALUES ('66', 'https://ftp.bmp.ovh/imgs/2021/02/6380cc43e18a82c0.jpg', '欢迎分享您的经验~', '2021-02-16 14:10:12.741000', '243031504@qq.com', '黄月月鸟龙', '27', null, '');
INSERT INTO `t_comment` VALUES ('67', '/images/p7.jpg', '!!!', '2021-02-18 17:13:41.776000', '22222222@qq.ccc', 'queryMe', '29', null, '');
INSERT INTO `t_comment` VALUES ('68', '/images/p7.jpg', '111', '2021-02-18 17:13:58.473000', '22222222@qq.ccc', 'updateMe', '29', '67', '');
INSERT INTO `t_comment` VALUES ('69', 'https://ftp.bmp.ovh/imgs/2021/02/6380cc43e18a82c0.jpg', '###', '2021-02-18 17:14:17.099000', '243031504@qq.com', '黄月月鸟龙', '29', '68', '');
INSERT INTO `t_comment` VALUES ('70', 'https://ftp.bmp.ovh/imgs/2021/02/6380cc43e18a82c0.jpg', '***', '2021-02-18 17:14:39.625000', '243031504@qq.com', '黄月月鸟龙', '29', '69', '');
INSERT INTO `t_comment` VALUES ('71', '/images/p7.jpg', '@@', '2021-02-18 17:17:46.922000', '22222222@qq.ccc', 'yep', '29', '68', '');
INSERT INTO `t_comment` VALUES ('72', '/images/p7.jpg', 'qqq', '2021-02-18 17:20:16.379000', '243031504@qq.com', '哈哈哈', '29', '71', '');
INSERT INTO `t_comment` VALUES ('73', '/images/p7.jpg', '<script type=\"text/javascript\"> alert(\"我是JavaScript代码！\");</script>', '2021-02-20 19:45:22.391000', '22323504@qq.com', '啊啊啊', '17', null, '');
INSERT INTO `t_comment` VALUES ('74', '/images/p7.jpg', '巴拉巴拉', '2021-02-28 13:35:00.195000', '22323504@qq.com', '哈哈哈', '31', null, '');
INSERT INTO `t_comment` VALUES ('75', 'https://ftp.bmp.ovh/imgs/2021/02/6380cc43e18a82c0.jpg', 'hey', '2021-03-04 11:28:30.432000', '243031504@qq.com', '黄月月鸟龙', '32', null, '');
INSERT INTO `t_comment` VALUES ('76', 'https://ftp.bmp.ovh/imgs/2021/02/6380cc43e18a82c0.jpg', '沙发\n', '2021-03-10 09:17:25.103000', '243031504@qq.com', '黄月月鸟龙', '35', null, '');
INSERT INTO `t_comment` VALUES ('77', 'https://ftp.bmp.ovh/imgs/2021/02/6380cc43e18a82c0.jpg', '~~~', '2021-03-10 09:17:32.348000', '243031504@qq.com', '黄月月鸟龙', '35', '76', '');
INSERT INTO `t_comment` VALUES ('78', '/images/p7.jpg', '我在答辩！！！', '2021-05-20 10:07:52.196000', '222@qq.com', '答辩', '32', null, '');
INSERT INTO `t_comment` VALUES ('79', '/images/p7.jpg', '加油！！！', '2021-05-20 10:08:13.180000', '2222222@qq.com', 'hpl', '32', '78', '');
INSERT INTO `t_tag` VALUES ('1', 'C++入门');
INSERT INTO `t_tag` VALUES ('2', 'Java[入门]');
INSERT INTO `t_tag` VALUES ('14', 'SpringBoot');
INSERT INTO `t_tag` VALUES ('15', 'Spring');
INSERT INTO `t_tag` VALUES ('17', '操作系统');
INSERT INTO `t_tag` VALUES ('18', '计算机网络');
INSERT INTO `t_tag` VALUES ('19', '数据结构（入门）');
INSERT INTO `t_tag` VALUES ('20', '数据结构（进阶）');
INSERT INTO `t_tag` VALUES ('24', 'C');
INSERT INTO `t_tag` VALUES ('25', '位运算');
INSERT INTO `t_tag` VALUES ('26', 'Java[进阶]');
INSERT INTO `t_type` VALUES ('1', '学习笔记');
INSERT INTO `t_type` VALUES ('2', '算法笔记');
INSERT INTO `t_type` VALUES ('3', '考研笔记');
INSERT INTO `t_type` VALUES ('4', '常见踩坑');
INSERT INTO `t_type` VALUES ('5', 'Java学习');
INSERT INTO `t_type` VALUES ('39', 'C++学习');
INSERT INTO `t_type` VALUES ('40', 'C语言学习');
INSERT INTO `t_type` VALUES ('41', 'Leetcode');
INSERT INTO `t_user` VALUES ('1', 'https://ftp.bmp.ovh/imgs/2021/02/6380cc43e18a82c0.jpg', '2021-01-28 14:09:27.000000', '243031504@qq.com', '黄月月鸟龙', 'hpl', '46f94c8de14fb36680850768ff1b7f2a', '2021-01-28 14:09:50.000000', '1');
